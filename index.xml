<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bobble Law</title><link>https://bobblelaw.github.io/</link><description>Recent content on Bobble Law</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Tue, 03 Jun 2025 22:38:00 +0100</lastBuildDate><atom:link href="https://bobblelaw.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Emojis in Markdown</title><link>https://bobblelaw.github.io/posts/emojis-in-markdown/</link><pubDate>Tue, 03 Jun 2025 22:38:00 +0100</pubDate><guid>https://bobblelaw.github.io/posts/emojis-in-markdown/</guid><description>&lt;p>Reference: &lt;a href="https://gist.github.com/rxaviers/7360908">Complete list of github markdown emoji markup&lt;/a>&lt;/p>
&lt;h2 id="people">People&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>:bowtie: &lt;code>:bowtie:&lt;/code>&lt;/th>
 &lt;th>:smile: &lt;code>:smile:&lt;/code>&lt;/th>
 &lt;th>:laughing: &lt;code>:laughing:&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>:blush: &lt;code>:blush:&lt;/code>&lt;/td>
 &lt;td>:smiley: &lt;code>:smiley:&lt;/code>&lt;/td>
 &lt;td>:relaxed: &lt;code>:relaxed:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:smirk: &lt;code>:smirk:&lt;/code>&lt;/td>
 &lt;td>:heart_eyes: &lt;code>:heart_eyes:&lt;/code>&lt;/td>
 &lt;td>:kissing_heart: &lt;code>:kissing_heart:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:kissing_closed_eyes: &lt;code>:kissing_closed_eyes:&lt;/code>&lt;/td>
 &lt;td>:flushed: &lt;code>:flushed:&lt;/code>&lt;/td>
 &lt;td>:relieved: &lt;code>:relieved:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:satisfied: &lt;code>:satisfied:&lt;/code>&lt;/td>
 &lt;td>:grin: &lt;code>:grin:&lt;/code>&lt;/td>
 &lt;td>:wink: &lt;code>:wink:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:stuck_out_tongue_winking_eye: &lt;code>:stuck_out_tongue_winking_eye:&lt;/code>&lt;/td>
 &lt;td>:stuck_out_tongue_closed_eyes: &lt;code>:stuck_out_tongue_closed_eyes:&lt;/code>&lt;/td>
 &lt;td>:grinning: &lt;code>:grinning:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:kissing: &lt;code>:kissing:&lt;/code>&lt;/td>
 &lt;td>:kissing_smiling_eyes: &lt;code>:kissing_smiling_eyes:&lt;/code>&lt;/td>
 &lt;td>:stuck_out_tongue: &lt;code>:stuck_out_tongue:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sleeping: &lt;code>:sleeping:&lt;/code>&lt;/td>
 &lt;td>:worried: &lt;code>:worried:&lt;/code>&lt;/td>
 &lt;td>:frowning: &lt;code>:frowning:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:anguished: &lt;code>:anguished:&lt;/code>&lt;/td>
 &lt;td>:open_mouth: &lt;code>:open_mouth:&lt;/code>&lt;/td>
 &lt;td>:grimacing: &lt;code>:grimacing:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:confused: &lt;code>:confused:&lt;/code>&lt;/td>
 &lt;td>:hushed: &lt;code>:hushed:&lt;/code>&lt;/td>
 &lt;td>:expressionless: &lt;code>:expressionless:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:unamused: &lt;code>:unamused:&lt;/code>&lt;/td>
 &lt;td>:sweat_smile: &lt;code>:sweat_smile:&lt;/code>&lt;/td>
 &lt;td>:sweat: &lt;code>:sweat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:disappointed_relieved: &lt;code>:disappointed_relieved:&lt;/code>&lt;/td>
 &lt;td>:weary: &lt;code>:weary:&lt;/code>&lt;/td>
 &lt;td>:pensive: &lt;code>:pensive:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:disappointed: &lt;code>:disappointed:&lt;/code>&lt;/td>
 &lt;td>:confounded: &lt;code>:confounded:&lt;/code>&lt;/td>
 &lt;td>:fearful: &lt;code>:fearful:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cold_sweat: &lt;code>:cold_sweat:&lt;/code>&lt;/td>
 &lt;td>:persevere: &lt;code>:persevere:&lt;/code>&lt;/td>
 &lt;td>:cry: &lt;code>:cry:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sob: &lt;code>:sob:&lt;/code>&lt;/td>
 &lt;td>:joy: &lt;code>:joy:&lt;/code>&lt;/td>
 &lt;td>:astonished: &lt;code>:astonished:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:scream: &lt;code>:scream:&lt;/code>&lt;/td>
 &lt;td>:neckbeard: &lt;code>:neckbeard:&lt;/code>&lt;/td>
 &lt;td>:tired_face: &lt;code>:tired_face:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:angry: &lt;code>:angry:&lt;/code>&lt;/td>
 &lt;td>:rage: &lt;code>:rage:&lt;/code>&lt;/td>
 &lt;td>:triumph: &lt;code>:triumph:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sleepy: &lt;code>:sleepy:&lt;/code>&lt;/td>
 &lt;td>:yum: &lt;code>:yum:&lt;/code>&lt;/td>
 &lt;td>:mask: &lt;code>:mask:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sunglasses: &lt;code>:sunglasses:&lt;/code>&lt;/td>
 &lt;td>:dizzy_face: &lt;code>:dizzy_face:&lt;/code>&lt;/td>
 &lt;td>:imp: &lt;code>:imp:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:smiling_imp: &lt;code>:smiling_imp:&lt;/code>&lt;/td>
 &lt;td>:neutral_face: &lt;code>:neutral_face:&lt;/code>&lt;/td>
 &lt;td>:no_mouth: &lt;code>:no_mouth:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:innocent: &lt;code>:innocent:&lt;/code>&lt;/td>
 &lt;td>:alien: &lt;code>:alien:&lt;/code>&lt;/td>
 &lt;td>:yellow_heart: &lt;code>:yellow_heart:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:blue_heart: &lt;code>:blue_heart:&lt;/code>&lt;/td>
 &lt;td>:purple_heart: &lt;code>:purple_heart:&lt;/code>&lt;/td>
 &lt;td>:heart: &lt;code>:heart:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:green_heart: &lt;code>:green_heart:&lt;/code>&lt;/td>
 &lt;td>:broken_heart: &lt;code>:broken_heart:&lt;/code>&lt;/td>
 &lt;td>:heartbeat: &lt;code>:heartbeat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:heartpulse: &lt;code>:heartpulse:&lt;/code>&lt;/td>
 &lt;td>:two_hearts: &lt;code>:two_hearts:&lt;/code>&lt;/td>
 &lt;td>:revolving_hearts: &lt;code>:revolving_hearts:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cupid: &lt;code>:cupid:&lt;/code>&lt;/td>
 &lt;td>:sparkling_heart: &lt;code>:sparkling_heart:&lt;/code>&lt;/td>
 &lt;td>:sparkles: &lt;code>:sparkles:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:star: &lt;code>:star:&lt;/code>&lt;/td>
 &lt;td>:star2: &lt;code>:star2:&lt;/code>&lt;/td>
 &lt;td>:dizzy: &lt;code>:dizzy:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:boom: &lt;code>:boom:&lt;/code>&lt;/td>
 &lt;td>:collision: &lt;code>:collision:&lt;/code>&lt;/td>
 &lt;td>:anger: &lt;code>:anger:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:exclamation: &lt;code>:exclamation:&lt;/code>&lt;/td>
 &lt;td>:question: &lt;code>:question:&lt;/code>&lt;/td>
 &lt;td>:grey_exclamation: &lt;code>:grey_exclamation:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:grey_question: &lt;code>:grey_question:&lt;/code>&lt;/td>
 &lt;td>:zzz: &lt;code>:zzz:&lt;/code>&lt;/td>
 &lt;td>:dash: &lt;code>:dash:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sweat_drops: &lt;code>:sweat_drops:&lt;/code>&lt;/td>
 &lt;td>:notes: &lt;code>:notes:&lt;/code>&lt;/td>
 &lt;td>:musical_note: &lt;code>:musical_note:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:fire: &lt;code>:fire:&lt;/code>&lt;/td>
 &lt;td>:hankey: &lt;code>:hankey:&lt;/code>&lt;/td>
 &lt;td>:poop: &lt;code>:poop:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:shit: &lt;code>:shit:&lt;/code>&lt;/td>
 &lt;td>:+1: &lt;code>:+1:&lt;/code>&lt;/td>
 &lt;td>:thumbsup: &lt;code>:thumbsup:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:-1: &lt;code>:-1:&lt;/code>&lt;/td>
 &lt;td>:thumbsdown: &lt;code>:thumbsdown:&lt;/code>&lt;/td>
 &lt;td>:ok_hand: &lt;code>:ok_hand:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:punch: &lt;code>:punch:&lt;/code>&lt;/td>
 &lt;td>:facepunch: &lt;code>:facepunch:&lt;/code>&lt;/td>
 &lt;td>:fist: &lt;code>:fist:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:v: &lt;code>:v:&lt;/code>&lt;/td>
 &lt;td>:wave: &lt;code>:wave:&lt;/code>&lt;/td>
 &lt;td>:hand: &lt;code>:hand:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:raised_hand: &lt;code>:raised_hand:&lt;/code>&lt;/td>
 &lt;td>:open_hands: &lt;code>:open_hands:&lt;/code>&lt;/td>
 &lt;td>:point_up: &lt;code>:point_up:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:point_down: &lt;code>:point_down:&lt;/code>&lt;/td>
 &lt;td>:point_left: &lt;code>:point_left:&lt;/code>&lt;/td>
 &lt;td>:point_right: &lt;code>:point_right:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:raised_hands: &lt;code>:raised_hands:&lt;/code>&lt;/td>
 &lt;td>:pray: &lt;code>:pray:&lt;/code>&lt;/td>
 &lt;td>:point_up_2: &lt;code>:point_up_2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clap: &lt;code>:clap:&lt;/code>&lt;/td>
 &lt;td>:muscle: &lt;code>:muscle:&lt;/code>&lt;/td>
 &lt;td>:metal: &lt;code>:metal:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:fu: &lt;code>:fu:&lt;/code>&lt;/td>
 &lt;td>:walking: &lt;code>:walking:&lt;/code>&lt;/td>
 &lt;td>:runner: &lt;code>:runner:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:running: &lt;code>:running:&lt;/code>&lt;/td>
 &lt;td>:couple: &lt;code>:couple:&lt;/code>&lt;/td>
 &lt;td>:family: &lt;code>:family:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:two_men_holding_hands: &lt;code>:two_men_holding_hands:&lt;/code>&lt;/td>
 &lt;td>:two_women_holding_hands: &lt;code>:two_women_holding_hands:&lt;/code>&lt;/td>
 &lt;td>:dancer: &lt;code>:dancer:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:dancers: &lt;code>:dancers:&lt;/code>&lt;/td>
 &lt;td>:ok_woman: &lt;code>:ok_woman:&lt;/code>&lt;/td>
 &lt;td>:no_good: &lt;code>:no_good:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:information_desk_person: &lt;code>:information_desk_person:&lt;/code>&lt;/td>
 &lt;td>:raising_hand: &lt;code>:raising_hand:&lt;/code>&lt;/td>
 &lt;td>:bride_with_veil: &lt;code>:bride_with_veil:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:person_with_pouting_face: &lt;code>:person_with_pouting_face:&lt;/code>&lt;/td>
 &lt;td>:person_frowning: &lt;code>:person_frowning:&lt;/code>&lt;/td>
 &lt;td>:bow: &lt;code>:bow:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:couplekiss: &lt;code>:couplekiss:&lt;/code>&lt;/td>
 &lt;td>:couple_with_heart: &lt;code>:couple_with_heart:&lt;/code>&lt;/td>
 &lt;td>:massage: &lt;code>:massage:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:haircut: &lt;code>:haircut:&lt;/code>&lt;/td>
 &lt;td>:nail_care: &lt;code>:nail_care:&lt;/code>&lt;/td>
 &lt;td>:boy: &lt;code>:boy:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:girl: &lt;code>:girl:&lt;/code>&lt;/td>
 &lt;td>:woman: &lt;code>:woman:&lt;/code>&lt;/td>
 &lt;td>:man: &lt;code>:man:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:baby: &lt;code>:baby:&lt;/code>&lt;/td>
 &lt;td>:older_woman: &lt;code>:older_woman:&lt;/code>&lt;/td>
 &lt;td>:older_man: &lt;code>:older_man:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:person_with_blond_hair: &lt;code>:person_with_blond_hair:&lt;/code>&lt;/td>
 &lt;td>:man_with_gua_pi_mao: &lt;code>:man_with_gua_pi_mao:&lt;/code>&lt;/td>
 &lt;td>:man_with_turban: &lt;code>:man_with_turban:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:construction_worker: &lt;code>:construction_worker:&lt;/code>&lt;/td>
 &lt;td>:cop: &lt;code>:cop:&lt;/code>&lt;/td>
 &lt;td>:angel: &lt;code>:angel:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:princess: &lt;code>:princess:&lt;/code>&lt;/td>
 &lt;td>:smiley_cat: &lt;code>:smiley_cat:&lt;/code>&lt;/td>
 &lt;td>:smile_cat: &lt;code>:smile_cat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:heart_eyes_cat: &lt;code>:heart_eyes_cat:&lt;/code>&lt;/td>
 &lt;td>:kissing_cat: &lt;code>:kissing_cat:&lt;/code>&lt;/td>
 &lt;td>:smirk_cat: &lt;code>:smirk_cat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:scream_cat: &lt;code>:scream_cat:&lt;/code>&lt;/td>
 &lt;td>:crying_cat_face: &lt;code>:crying_cat_face:&lt;/code>&lt;/td>
 &lt;td>:joy_cat: &lt;code>:joy_cat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:pouting_cat: &lt;code>:pouting_cat:&lt;/code>&lt;/td>
 &lt;td>:japanese_ogre: &lt;code>:japanese_ogre:&lt;/code>&lt;/td>
 &lt;td>:japanese_goblin: &lt;code>:japanese_goblin:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:see_no_evil: &lt;code>:see_no_evil:&lt;/code>&lt;/td>
 &lt;td>:hear_no_evil: &lt;code>:hear_no_evil:&lt;/code>&lt;/td>
 &lt;td>:speak_no_evil: &lt;code>:speak_no_evil:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:guardsman: &lt;code>:guardsman:&lt;/code>&lt;/td>
 &lt;td>:skull: &lt;code>:skull:&lt;/code>&lt;/td>
 &lt;td>:feet: &lt;code>:feet:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:lips: &lt;code>:lips:&lt;/code>&lt;/td>
 &lt;td>:kiss: &lt;code>:kiss:&lt;/code>&lt;/td>
 &lt;td>:droplet: &lt;code>:droplet:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ear: &lt;code>:ear:&lt;/code>&lt;/td>
 &lt;td>:eyes: &lt;code>:eyes:&lt;/code>&lt;/td>
 &lt;td>:nose: &lt;code>:nose:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tongue: &lt;code>:tongue:&lt;/code>&lt;/td>
 &lt;td>:love_letter: &lt;code>:love_letter:&lt;/code>&lt;/td>
 &lt;td>:bust_in_silhouette: &lt;code>:bust_in_silhouette:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:busts_in_silhouette: &lt;code>:busts_in_silhouette:&lt;/code>&lt;/td>
 &lt;td>:speech_balloon: &lt;code>:speech_balloon:&lt;/code>&lt;/td>
 &lt;td>:thought_balloon: &lt;code>:thought_balloon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:feelsgood: &lt;code>:feelsgood:&lt;/code>&lt;/td>
 &lt;td>:finnadie: &lt;code>:finnadie:&lt;/code>&lt;/td>
 &lt;td>:goberserk: &lt;code>:goberserk:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:godmode: &lt;code>:godmode:&lt;/code>&lt;/td>
 &lt;td>:hurtrealbad: &lt;code>:hurtrealbad:&lt;/code>&lt;/td>
 &lt;td>:rage1: &lt;code>:rage1:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rage2: &lt;code>:rage2:&lt;/code>&lt;/td>
 &lt;td>:rage3: &lt;code>:rage3:&lt;/code>&lt;/td>
 &lt;td>:rage4: &lt;code>:rage4:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:suspect: &lt;code>:suspect:&lt;/code>&lt;/td>
 &lt;td>:trollface: &lt;code>:trollface:&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="nature">Nature&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>:sunny: &lt;code>:sunny:&lt;/code>&lt;/th>
 &lt;th>:umbrella: &lt;code>:umbrella:&lt;/code>&lt;/th>
 &lt;th>:cloud: &lt;code>:cloud:&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>:snowflake: &lt;code>:snowflake:&lt;/code>&lt;/td>
 &lt;td>:snowman: &lt;code>:snowman:&lt;/code>&lt;/td>
 &lt;td>:zap: &lt;code>:zap:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cyclone: &lt;code>:cyclone:&lt;/code>&lt;/td>
 &lt;td>:foggy: &lt;code>:foggy:&lt;/code>&lt;/td>
 &lt;td>:ocean: &lt;code>:ocean:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cat: &lt;code>:cat:&lt;/code>&lt;/td>
 &lt;td>:dog: &lt;code>:dog:&lt;/code>&lt;/td>
 &lt;td>:mouse: &lt;code>:mouse:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:hamster: &lt;code>:hamster:&lt;/code>&lt;/td>
 &lt;td>:rabbit: &lt;code>:rabbit:&lt;/code>&lt;/td>
 &lt;td>:wolf: &lt;code>:wolf:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:frog: &lt;code>:frog:&lt;/code>&lt;/td>
 &lt;td>:tiger: &lt;code>:tiger:&lt;/code>&lt;/td>
 &lt;td>:koala: &lt;code>:koala:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bear: &lt;code>:bear:&lt;/code>&lt;/td>
 &lt;td>:pig: &lt;code>:pig:&lt;/code>&lt;/td>
 &lt;td>:pig_nose: &lt;code>:pig_nose:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cow: &lt;code>:cow:&lt;/code>&lt;/td>
 &lt;td>:boar: &lt;code>:boar:&lt;/code>&lt;/td>
 &lt;td>:monkey_face: &lt;code>:monkey_face:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:monkey: &lt;code>:monkey:&lt;/code>&lt;/td>
 &lt;td>:horse: &lt;code>:horse:&lt;/code>&lt;/td>
 &lt;td>:racehorse: &lt;code>:racehorse:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:camel: &lt;code>:camel:&lt;/code>&lt;/td>
 &lt;td>:sheep: &lt;code>:sheep:&lt;/code>&lt;/td>
 &lt;td>:elephant: &lt;code>:elephant:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:panda_face: &lt;code>:panda_face:&lt;/code>&lt;/td>
 &lt;td>:snake: &lt;code>:snake:&lt;/code>&lt;/td>
 &lt;td>:bird: &lt;code>:bird:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:baby_chick: &lt;code>:baby_chick:&lt;/code>&lt;/td>
 &lt;td>:hatched_chick: &lt;code>:hatched_chick:&lt;/code>&lt;/td>
 &lt;td>:hatching_chick: &lt;code>:hatching_chick:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:chicken: &lt;code>:chicken:&lt;/code>&lt;/td>
 &lt;td>:penguin: &lt;code>:penguin:&lt;/code>&lt;/td>
 &lt;td>:turtle: &lt;code>:turtle:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bug: &lt;code>:bug:&lt;/code>&lt;/td>
 &lt;td>:honeybee: &lt;code>:honeybee:&lt;/code>&lt;/td>
 &lt;td>:ant: &lt;code>:ant:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:beetle: &lt;code>:beetle:&lt;/code>&lt;/td>
 &lt;td>:snail: &lt;code>:snail:&lt;/code>&lt;/td>
 &lt;td>:octopus: &lt;code>:octopus:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tropical_fish: &lt;code>:tropical_fish:&lt;/code>&lt;/td>
 &lt;td>:fish: &lt;code>:fish:&lt;/code>&lt;/td>
 &lt;td>:whale: &lt;code>:whale:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:whale2: &lt;code>:whale2:&lt;/code>&lt;/td>
 &lt;td>:dolphin: &lt;code>:dolphin:&lt;/code>&lt;/td>
 &lt;td>:cow2: &lt;code>:cow2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ram: &lt;code>:ram:&lt;/code>&lt;/td>
 &lt;td>:rat: &lt;code>:rat:&lt;/code>&lt;/td>
 &lt;td>:water_buffalo: &lt;code>:water_buffalo:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tiger2: &lt;code>:tiger2:&lt;/code>&lt;/td>
 &lt;td>:rabbit2: &lt;code>:rabbit2:&lt;/code>&lt;/td>
 &lt;td>:dragon: &lt;code>:dragon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:goat: &lt;code>:goat:&lt;/code>&lt;/td>
 &lt;td>:rooster: &lt;code>:rooster:&lt;/code>&lt;/td>
 &lt;td>:dog2: &lt;code>:dog2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:pig2: &lt;code>:pig2:&lt;/code>&lt;/td>
 &lt;td>:mouse2: &lt;code>:mouse2:&lt;/code>&lt;/td>
 &lt;td>:ox: &lt;code>:ox:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:dragon_face: &lt;code>:dragon_face:&lt;/code>&lt;/td>
 &lt;td>:blowfish: &lt;code>:blowfish:&lt;/code>&lt;/td>
 &lt;td>:crocodile: &lt;code>:crocodile:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:dromedary_camel: &lt;code>:dromedary_camel:&lt;/code>&lt;/td>
 &lt;td>:leopard: &lt;code>:leopard:&lt;/code>&lt;/td>
 &lt;td>:cat2: &lt;code>:cat2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:poodle: &lt;code>:poodle:&lt;/code>&lt;/td>
 &lt;td>:paw_prints: &lt;code>:paw_prints:&lt;/code>&lt;/td>
 &lt;td>:bouquet: &lt;code>:bouquet:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cherry_blossom: &lt;code>:cherry_blossom:&lt;/code>&lt;/td>
 &lt;td>:tulip: &lt;code>:tulip:&lt;/code>&lt;/td>
 &lt;td>:four_leaf_clover: &lt;code>:four_leaf_clover:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rose: &lt;code>:rose:&lt;/code>&lt;/td>
 &lt;td>:sunflower: &lt;code>:sunflower:&lt;/code>&lt;/td>
 &lt;td>:hibiscus: &lt;code>:hibiscus:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:maple_leaf: &lt;code>:maple_leaf:&lt;/code>&lt;/td>
 &lt;td>:leaves: &lt;code>:leaves:&lt;/code>&lt;/td>
 &lt;td>:fallen_leaf: &lt;code>:fallen_leaf:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:herb: &lt;code>:herb:&lt;/code>&lt;/td>
 &lt;td>:mushroom: &lt;code>:mushroom:&lt;/code>&lt;/td>
 &lt;td>:cactus: &lt;code>:cactus:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:palm_tree: &lt;code>:palm_tree:&lt;/code>&lt;/td>
 &lt;td>:evergreen_tree: &lt;code>:evergreen_tree:&lt;/code>&lt;/td>
 &lt;td>:deciduous_tree: &lt;code>:deciduous_tree:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:chestnut: &lt;code>:chestnut:&lt;/code>&lt;/td>
 &lt;td>:seedling: &lt;code>:seedling:&lt;/code>&lt;/td>
 &lt;td>:blossom: &lt;code>:blossom:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ear_of_rice: &lt;code>:ear_of_rice:&lt;/code>&lt;/td>
 &lt;td>:shell: &lt;code>:shell:&lt;/code>&lt;/td>
 &lt;td>:globe_with_meridians: &lt;code>:globe_with_meridians:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sun_with_face: &lt;code>:sun_with_face:&lt;/code>&lt;/td>
 &lt;td>:full_moon_with_face: &lt;code>:full_moon_with_face:&lt;/code>&lt;/td>
 &lt;td>:new_moon_with_face: &lt;code>:new_moon_with_face:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:new_moon: &lt;code>:new_moon:&lt;/code>&lt;/td>
 &lt;td>:waxing_crescent_moon: &lt;code>:waxing_crescent_moon:&lt;/code>&lt;/td>
 &lt;td>:first_quarter_moon: &lt;code>:first_quarter_moon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:waxing_gibbous_moon: &lt;code>:waxing_gibbous_moon:&lt;/code>&lt;/td>
 &lt;td>:full_moon: &lt;code>:full_moon:&lt;/code>&lt;/td>
 &lt;td>:waning_gibbous_moon: &lt;code>:waning_gibbous_moon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:last_quarter_moon: &lt;code>:last_quarter_moon:&lt;/code>&lt;/td>
 &lt;td>:waning_crescent_moon: &lt;code>:waning_crescent_moon:&lt;/code>&lt;/td>
 &lt;td>:last_quarter_moon_with_face: &lt;code>:last_quarter_moon_with_face:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:first_quarter_moon_with_face: &lt;code>:first_quarter_moon_with_face:&lt;/code>&lt;/td>
 &lt;td>:moon: &lt;code>:moon:&lt;/code>&lt;/td>
 &lt;td>:earth_africa: &lt;code>:earth_africa:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:earth_americas: &lt;code>:earth_americas:&lt;/code>&lt;/td>
 &lt;td>:earth_asia: &lt;code>:earth_asia:&lt;/code>&lt;/td>
 &lt;td>:volcano: &lt;code>:volcano:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:milky_way: &lt;code>:milky_way:&lt;/code>&lt;/td>
 &lt;td>:partly_sunny: &lt;code>:partly_sunny:&lt;/code>&lt;/td>
 &lt;td>:octocat: &lt;code>:octocat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:squirrel: &lt;code>:squirrel:&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="objects">Objects&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>:bamboo: &lt;code>:bamboo:&lt;/code>&lt;/th>
 &lt;th>:gift_heart: &lt;code>:gift_heart:&lt;/code>&lt;/th>
 &lt;th>:dolls: &lt;code>:dolls:&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>:school_satchel: &lt;code>:school_satchel:&lt;/code>&lt;/td>
 &lt;td>:mortar_board: &lt;code>:mortar_board:&lt;/code>&lt;/td>
 &lt;td>:flags: &lt;code>:flags:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:fireworks: &lt;code>:fireworks:&lt;/code>&lt;/td>
 &lt;td>:sparkler: &lt;code>:sparkler:&lt;/code>&lt;/td>
 &lt;td>:wind_chime: &lt;code>:wind_chime:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rice_scene: &lt;code>:rice_scene:&lt;/code>&lt;/td>
 &lt;td>:jack_o_lantern: &lt;code>:jack_o_lantern:&lt;/code>&lt;/td>
 &lt;td>:ghost: &lt;code>:ghost:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:santa: &lt;code>:santa:&lt;/code>&lt;/td>
 &lt;td>:christmas_tree: &lt;code>:christmas_tree:&lt;/code>&lt;/td>
 &lt;td>:gift: &lt;code>:gift:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bell: &lt;code>:bell:&lt;/code>&lt;/td>
 &lt;td>:no_bell: &lt;code>:no_bell:&lt;/code>&lt;/td>
 &lt;td>:tanabata_tree: &lt;code>:tanabata_tree:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tada: &lt;code>:tada:&lt;/code>&lt;/td>
 &lt;td>:confetti_ball: &lt;code>:confetti_ball:&lt;/code>&lt;/td>
 &lt;td>:balloon: &lt;code>:balloon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:crystal_ball: &lt;code>:crystal_ball:&lt;/code>&lt;/td>
 &lt;td>:cd: &lt;code>:cd:&lt;/code>&lt;/td>
 &lt;td>:dvd: &lt;code>:dvd:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:floppy_disk: &lt;code>:floppy_disk:&lt;/code>&lt;/td>
 &lt;td>:camera: &lt;code>:camera:&lt;/code>&lt;/td>
 &lt;td>:video_camera: &lt;code>:video_camera:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:movie_camera: &lt;code>:movie_camera:&lt;/code>&lt;/td>
 &lt;td>:computer: &lt;code>:computer:&lt;/code>&lt;/td>
 &lt;td>:tv: &lt;code>:tv:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:iphone: &lt;code>:iphone:&lt;/code>&lt;/td>
 &lt;td>:phone: &lt;code>:phone:&lt;/code>&lt;/td>
 &lt;td>:telephone: &lt;code>:telephone:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:telephone_receiver: &lt;code>:telephone_receiver:&lt;/code>&lt;/td>
 &lt;td>:pager: &lt;code>:pager:&lt;/code>&lt;/td>
 &lt;td>:fax: &lt;code>:fax:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:minidisc: &lt;code>:minidisc:&lt;/code>&lt;/td>
 &lt;td>:vhs: &lt;code>:vhs:&lt;/code>&lt;/td>
 &lt;td>:sound: &lt;code>:sound:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:speaker: &lt;code>:speaker:&lt;/code>&lt;/td>
 &lt;td>:mute: &lt;code>:mute:&lt;/code>&lt;/td>
 &lt;td>:loudspeaker: &lt;code>:loudspeaker:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:mega: &lt;code>:mega:&lt;/code>&lt;/td>
 &lt;td>:hourglass: &lt;code>:hourglass:&lt;/code>&lt;/td>
 &lt;td>:hourglass_flowing_sand: &lt;code>:hourglass_flowing_sand:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:alarm_clock: &lt;code>:alarm_clock:&lt;/code>&lt;/td>
 &lt;td>:watch: &lt;code>:watch:&lt;/code>&lt;/td>
 &lt;td>:radio: &lt;code>:radio:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:satellite: &lt;code>:satellite:&lt;/code>&lt;/td>
 &lt;td>:loop: &lt;code>:loop:&lt;/code>&lt;/td>
 &lt;td>:mag: &lt;code>:mag:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:mag_right: &lt;code>:mag_right:&lt;/code>&lt;/td>
 &lt;td>:unlock: &lt;code>:unlock:&lt;/code>&lt;/td>
 &lt;td>:lock: &lt;code>:lock:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:lock_with_ink_pen: &lt;code>:lock_with_ink_pen:&lt;/code>&lt;/td>
 &lt;td>:closed_lock_with_key: &lt;code>:closed_lock_with_key:&lt;/code>&lt;/td>
 &lt;td>:key: &lt;code>:key:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bulb: &lt;code>:bulb:&lt;/code>&lt;/td>
 &lt;td>:flashlight: &lt;code>:flashlight:&lt;/code>&lt;/td>
 &lt;td>:high_brightness: &lt;code>:high_brightness:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:low_brightness: &lt;code>:low_brightness:&lt;/code>&lt;/td>
 &lt;td>:electric_plug: &lt;code>:electric_plug:&lt;/code>&lt;/td>
 &lt;td>:battery: &lt;code>:battery:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:calling: &lt;code>:calling:&lt;/code>&lt;/td>
 &lt;td>:email: &lt;code>:email:&lt;/code>&lt;/td>
 &lt;td>:mailbox: &lt;code>:mailbox:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:postbox: &lt;code>:postbox:&lt;/code>&lt;/td>
 &lt;td>:bath: &lt;code>:bath:&lt;/code>&lt;/td>
 &lt;td>:bathtub: &lt;code>:bathtub:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:shower: &lt;code>:shower:&lt;/code>&lt;/td>
 &lt;td>:toilet: &lt;code>:toilet:&lt;/code>&lt;/td>
 &lt;td>:wrench: &lt;code>:wrench:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:nut_and_bolt: &lt;code>:nut_and_bolt:&lt;/code>&lt;/td>
 &lt;td>:hammer: &lt;code>:hammer:&lt;/code>&lt;/td>
 &lt;td>:seat: &lt;code>:seat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:moneybag: &lt;code>:moneybag:&lt;/code>&lt;/td>
 &lt;td>:yen: &lt;code>:yen:&lt;/code>&lt;/td>
 &lt;td>:dollar: &lt;code>:dollar:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:pound: &lt;code>:pound:&lt;/code>&lt;/td>
 &lt;td>:euro: &lt;code>:euro:&lt;/code>&lt;/td>
 &lt;td>:credit_card: &lt;code>:credit_card:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:money_with_wings: &lt;code>:money_with_wings:&lt;/code>&lt;/td>
 &lt;td>:e-mail: &lt;code>:e-mail:&lt;/code>&lt;/td>
 &lt;td>:inbox_tray: &lt;code>:inbox_tray:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:outbox_tray: &lt;code>:outbox_tray:&lt;/code>&lt;/td>
 &lt;td>:envelope: &lt;code>:envelope:&lt;/code>&lt;/td>
 &lt;td>:incoming_envelope: &lt;code>:incoming_envelope:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:postal_horn: &lt;code>:postal_horn:&lt;/code>&lt;/td>
 &lt;td>:mailbox_closed: &lt;code>:mailbox_closed:&lt;/code>&lt;/td>
 &lt;td>:mailbox_with_mail: &lt;code>:mailbox_with_mail:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:mailbox_with_no_mail: &lt;code>:mailbox_with_no_mail:&lt;/code>&lt;/td>
 &lt;td>:door: &lt;code>:door:&lt;/code>&lt;/td>
 &lt;td>:smoking: &lt;code>:smoking:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bomb: &lt;code>:bomb:&lt;/code>&lt;/td>
 &lt;td>:gun: &lt;code>:gun:&lt;/code>&lt;/td>
 &lt;td>:hocho: &lt;code>:hocho:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:pill: &lt;code>:pill:&lt;/code>&lt;/td>
 &lt;td>:syringe: &lt;code>:syringe:&lt;/code>&lt;/td>
 &lt;td>:page_facing_up: &lt;code>:page_facing_up:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:page_with_curl: &lt;code>:page_with_curl:&lt;/code>&lt;/td>
 &lt;td>:bookmark_tabs: &lt;code>:bookmark_tabs:&lt;/code>&lt;/td>
 &lt;td>:bar_chart: &lt;code>:bar_chart:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:chart_with_upwards_trend: &lt;code>:chart_with_upwards_trend:&lt;/code>&lt;/td>
 &lt;td>:chart_with_downwards_trend: &lt;code>:chart_with_downwards_trend:&lt;/code>&lt;/td>
 &lt;td>:scroll: &lt;code>:scroll:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clipboard: &lt;code>:clipboard:&lt;/code>&lt;/td>
 &lt;td>:calendar: &lt;code>:calendar:&lt;/code>&lt;/td>
 &lt;td>:date: &lt;code>:date:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:card_index: &lt;code>:card_index:&lt;/code>&lt;/td>
 &lt;td>:file_folder: &lt;code>:file_folder:&lt;/code>&lt;/td>
 &lt;td>:open_file_folder: &lt;code>:open_file_folder:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:scissors: &lt;code>:scissors:&lt;/code>&lt;/td>
 &lt;td>:pushpin: &lt;code>:pushpin:&lt;/code>&lt;/td>
 &lt;td>:paperclip: &lt;code>:paperclip:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:black_nib: &lt;code>:black_nib:&lt;/code>&lt;/td>
 &lt;td>:pencil2: &lt;code>:pencil2:&lt;/code>&lt;/td>
 &lt;td>:straight_ruler: &lt;code>:straight_ruler:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:triangular_ruler: &lt;code>:triangular_ruler:&lt;/code>&lt;/td>
 &lt;td>:closed_book: &lt;code>:closed_book:&lt;/code>&lt;/td>
 &lt;td>:green_book: &lt;code>:green_book:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:blue_book: &lt;code>:blue_book:&lt;/code>&lt;/td>
 &lt;td>:orange_book: &lt;code>:orange_book:&lt;/code>&lt;/td>
 &lt;td>:notebook: &lt;code>:notebook:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:notebook_with_decorative_cover: &lt;code>:notebook_with_decorative_cover:&lt;/code>&lt;/td>
 &lt;td>:ledger: &lt;code>:ledger:&lt;/code>&lt;/td>
 &lt;td>:books: &lt;code>:books:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bookmark: &lt;code>:bookmark:&lt;/code>&lt;/td>
 &lt;td>:name_badge: &lt;code>:name_badge:&lt;/code>&lt;/td>
 &lt;td>:microscope: &lt;code>:microscope:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:telescope: &lt;code>:telescope:&lt;/code>&lt;/td>
 &lt;td>:newspaper: &lt;code>:newspaper:&lt;/code>&lt;/td>
 &lt;td>:football: &lt;code>:football:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:basketball: &lt;code>:basketball:&lt;/code>&lt;/td>
 &lt;td>:soccer: &lt;code>:soccer:&lt;/code>&lt;/td>
 &lt;td>:baseball: &lt;code>:baseball:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tennis: &lt;code>:tennis:&lt;/code>&lt;/td>
 &lt;td>:8ball: &lt;code>:8ball:&lt;/code>&lt;/td>
 &lt;td>:rugby_football: &lt;code>:rugby_football:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bowling: &lt;code>:bowling:&lt;/code>&lt;/td>
 &lt;td>:golf: &lt;code>:golf:&lt;/code>&lt;/td>
 &lt;td>:mountain_bicyclist: &lt;code>:mountain_bicyclist:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bicyclist: &lt;code>:bicyclist:&lt;/code>&lt;/td>
 &lt;td>:horse_racing: &lt;code>:horse_racing:&lt;/code>&lt;/td>
 &lt;td>:snowboarder: &lt;code>:snowboarder:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:swimmer: &lt;code>:swimmer:&lt;/code>&lt;/td>
 &lt;td>:surfer: &lt;code>:surfer:&lt;/code>&lt;/td>
 &lt;td>:ski: &lt;code>:ski:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:spades: &lt;code>:spades:&lt;/code>&lt;/td>
 &lt;td>:hearts: &lt;code>:hearts:&lt;/code>&lt;/td>
 &lt;td>:clubs: &lt;code>:clubs:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:diamonds: &lt;code>:diamonds:&lt;/code>&lt;/td>
 &lt;td>:gem: &lt;code>:gem:&lt;/code>&lt;/td>
 &lt;td>:ring: &lt;code>:ring:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:trophy: &lt;code>:trophy:&lt;/code>&lt;/td>
 &lt;td>:musical_score: &lt;code>:musical_score:&lt;/code>&lt;/td>
 &lt;td>:musical_keyboard: &lt;code>:musical_keyboard:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:violin: &lt;code>:violin:&lt;/code>&lt;/td>
 &lt;td>:space_invader: &lt;code>:space_invader:&lt;/code>&lt;/td>
 &lt;td>:video_game: &lt;code>:video_game:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:black_joker: &lt;code>:black_joker:&lt;/code>&lt;/td>
 &lt;td>:flower_playing_cards: &lt;code>:flower_playing_cards:&lt;/code>&lt;/td>
 &lt;td>:game_die: &lt;code>:game_die:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:dart: &lt;code>:dart:&lt;/code>&lt;/td>
 &lt;td>:mahjong: &lt;code>:mahjong:&lt;/code>&lt;/td>
 &lt;td>:clapper: &lt;code>:clapper:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:memo: &lt;code>:memo:&lt;/code>&lt;/td>
 &lt;td>:pencil: &lt;code>:pencil:&lt;/code>&lt;/td>
 &lt;td>:book: &lt;code>:book:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:art: &lt;code>:art:&lt;/code>&lt;/td>
 &lt;td>:microphone: &lt;code>:microphone:&lt;/code>&lt;/td>
 &lt;td>:headphones: &lt;code>:headphones:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:trumpet: &lt;code>:trumpet:&lt;/code>&lt;/td>
 &lt;td>:saxophone: &lt;code>:saxophone:&lt;/code>&lt;/td>
 &lt;td>:guitar: &lt;code>:guitar:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:shoe: &lt;code>:shoe:&lt;/code>&lt;/td>
 &lt;td>:sandal: &lt;code>:sandal:&lt;/code>&lt;/td>
 &lt;td>:high_heel: &lt;code>:high_heel:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:lipstick: &lt;code>:lipstick:&lt;/code>&lt;/td>
 &lt;td>:boot: &lt;code>:boot:&lt;/code>&lt;/td>
 &lt;td>:shirt: &lt;code>:shirt:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tshirt: &lt;code>:tshirt:&lt;/code>&lt;/td>
 &lt;td>:necktie: &lt;code>:necktie:&lt;/code>&lt;/td>
 &lt;td>:womans_clothes: &lt;code>:womans_clothes:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:dress: &lt;code>:dress:&lt;/code>&lt;/td>
 &lt;td>:running_shirt_with_sash: &lt;code>:running_shirt_with_sash:&lt;/code>&lt;/td>
 &lt;td>:jeans: &lt;code>:jeans:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:kimono: &lt;code>:kimono:&lt;/code>&lt;/td>
 &lt;td>:bikini: &lt;code>:bikini:&lt;/code>&lt;/td>
 &lt;td>:ribbon: &lt;code>:ribbon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tophat: &lt;code>:tophat:&lt;/code>&lt;/td>
 &lt;td>:crown: &lt;code>:crown:&lt;/code>&lt;/td>
 &lt;td>:womans_hat: &lt;code>:womans_hat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:mans_shoe: &lt;code>:mans_shoe:&lt;/code>&lt;/td>
 &lt;td>:closed_umbrella: &lt;code>:closed_umbrella:&lt;/code>&lt;/td>
 &lt;td>:briefcase: &lt;code>:briefcase:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:handbag: &lt;code>:handbag:&lt;/code>&lt;/td>
 &lt;td>:pouch: &lt;code>:pouch:&lt;/code>&lt;/td>
 &lt;td>:purse: &lt;code>:purse:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:eyeglasses: &lt;code>:eyeglasses:&lt;/code>&lt;/td>
 &lt;td>:fishing_pole_and_fish: &lt;code>:fishing_pole_and_fish:&lt;/code>&lt;/td>
 &lt;td>:coffee: &lt;code>:coffee:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tea: &lt;code>:tea:&lt;/code>&lt;/td>
 &lt;td>:sake: &lt;code>:sake:&lt;/code>&lt;/td>
 &lt;td>:baby_bottle: &lt;code>:baby_bottle:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:beer: &lt;code>:beer:&lt;/code>&lt;/td>
 &lt;td>:beers: &lt;code>:beers:&lt;/code>&lt;/td>
 &lt;td>:cocktail: &lt;code>:cocktail:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tropical_drink: &lt;code>:tropical_drink:&lt;/code>&lt;/td>
 &lt;td>:wine_glass: &lt;code>:wine_glass:&lt;/code>&lt;/td>
 &lt;td>:fork_and_knife: &lt;code>:fork_and_knife:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:pizza: &lt;code>:pizza:&lt;/code>&lt;/td>
 &lt;td>:hamburger: &lt;code>:hamburger:&lt;/code>&lt;/td>
 &lt;td>:fries: &lt;code>:fries:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:poultry_leg: &lt;code>:poultry_leg:&lt;/code>&lt;/td>
 &lt;td>:meat_on_bone: &lt;code>:meat_on_bone:&lt;/code>&lt;/td>
 &lt;td>:spaghetti: &lt;code>:spaghetti:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:curry: &lt;code>:curry:&lt;/code>&lt;/td>
 &lt;td>:fried_shrimp: &lt;code>:fried_shrimp:&lt;/code>&lt;/td>
 &lt;td>:bento: &lt;code>:bento:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sushi: &lt;code>:sushi:&lt;/code>&lt;/td>
 &lt;td>:fish_cake: &lt;code>:fish_cake:&lt;/code>&lt;/td>
 &lt;td>:rice_ball: &lt;code>:rice_ball:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rice_cracker: &lt;code>:rice_cracker:&lt;/code>&lt;/td>
 &lt;td>:rice: &lt;code>:rice:&lt;/code>&lt;/td>
 &lt;td>:ramen: &lt;code>:ramen:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:stew: &lt;code>:stew:&lt;/code>&lt;/td>
 &lt;td>:oden: &lt;code>:oden:&lt;/code>&lt;/td>
 &lt;td>:dango: &lt;code>:dango:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:egg: &lt;code>:egg:&lt;/code>&lt;/td>
 &lt;td>:bread: &lt;code>:bread:&lt;/code>&lt;/td>
 &lt;td>:doughnut: &lt;code>:doughnut:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:custard: &lt;code>:custard:&lt;/code>&lt;/td>
 &lt;td>:icecream: &lt;code>:icecream:&lt;/code>&lt;/td>
 &lt;td>:ice_cream: &lt;code>:ice_cream:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:shaved_ice: &lt;code>:shaved_ice:&lt;/code>&lt;/td>
 &lt;td>:birthday: &lt;code>:birthday:&lt;/code>&lt;/td>
 &lt;td>:cake: &lt;code>:cake:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cookie: &lt;code>:cookie:&lt;/code>&lt;/td>
 &lt;td>:chocolate_bar: &lt;code>:chocolate_bar:&lt;/code>&lt;/td>
 &lt;td>:candy: &lt;code>:candy:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:lollipop: &lt;code>:lollipop:&lt;/code>&lt;/td>
 &lt;td>:honey_pot: &lt;code>:honey_pot:&lt;/code>&lt;/td>
 &lt;td>:apple: &lt;code>:apple:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:green_apple: &lt;code>:green_apple:&lt;/code>&lt;/td>
 &lt;td>:tangerine: &lt;code>:tangerine:&lt;/code>&lt;/td>
 &lt;td>:lemon: &lt;code>:lemon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cherries: &lt;code>:cherries:&lt;/code>&lt;/td>
 &lt;td>:grapes: &lt;code>:grapes:&lt;/code>&lt;/td>
 &lt;td>:watermelon: &lt;code>:watermelon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:strawberry: &lt;code>:strawberry:&lt;/code>&lt;/td>
 &lt;td>:peach: &lt;code>:peach:&lt;/code>&lt;/td>
 &lt;td>:melon: &lt;code>:melon:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:banana: &lt;code>:banana:&lt;/code>&lt;/td>
 &lt;td>:pear: &lt;code>:pear:&lt;/code>&lt;/td>
 &lt;td>:pineapple: &lt;code>:pineapple:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sweet_potato: &lt;code>:sweet_potato:&lt;/code>&lt;/td>
 &lt;td>:eggplant: &lt;code>:eggplant:&lt;/code>&lt;/td>
 &lt;td>:tomato: &lt;code>:tomato:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:corn: &lt;code>:corn:&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="places">Places&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>:house: &lt;code>:house:&lt;/code>&lt;/th>
 &lt;th>:house_with_garden: &lt;code>:house_with_garden:&lt;/code>&lt;/th>
 &lt;th>:school: &lt;code>:school:&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>:office: &lt;code>:office:&lt;/code>&lt;/td>
 &lt;td>:post_office: &lt;code>:post_office:&lt;/code>&lt;/td>
 &lt;td>:hospital: &lt;code>:hospital:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bank: &lt;code>:bank:&lt;/code>&lt;/td>
 &lt;td>:convenience_store: &lt;code>:convenience_store:&lt;/code>&lt;/td>
 &lt;td>:love_hotel: &lt;code>:love_hotel:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:hotel: &lt;code>:hotel:&lt;/code>&lt;/td>
 &lt;td>:wedding: &lt;code>:wedding:&lt;/code>&lt;/td>
 &lt;td>:church: &lt;code>:church:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:department_store: &lt;code>:department_store:&lt;/code>&lt;/td>
 &lt;td>:european_post_office: &lt;code>:european_post_office:&lt;/code>&lt;/td>
 &lt;td>:city_sunrise: &lt;code>:city_sunrise:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:city_sunset: &lt;code>:city_sunset:&lt;/code>&lt;/td>
 &lt;td>:japanese_castle: &lt;code>:japanese_castle:&lt;/code>&lt;/td>
 &lt;td>:european_castle: &lt;code>:european_castle:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:tent: &lt;code>:tent:&lt;/code>&lt;/td>
 &lt;td>:factory: &lt;code>:factory:&lt;/code>&lt;/td>
 &lt;td>:tokyo_tower: &lt;code>:tokyo_tower:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:japan: &lt;code>:japan:&lt;/code>&lt;/td>
 &lt;td>:mount_fuji: &lt;code>:mount_fuji:&lt;/code>&lt;/td>
 &lt;td>:sunrise_over_mountains: &lt;code>:sunrise_over_mountains:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sunrise: &lt;code>:sunrise:&lt;/code>&lt;/td>
 &lt;td>:stars: &lt;code>:stars:&lt;/code>&lt;/td>
 &lt;td>:statue_of_liberty: &lt;code>:statue_of_liberty:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bridge_at_night: &lt;code>:bridge_at_night:&lt;/code>&lt;/td>
 &lt;td>:carousel_horse: &lt;code>:carousel_horse:&lt;/code>&lt;/td>
 &lt;td>:rainbow: &lt;code>:rainbow:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ferris_wheel: &lt;code>:ferris_wheel:&lt;/code>&lt;/td>
 &lt;td>:fountain: &lt;code>:fountain:&lt;/code>&lt;/td>
 &lt;td>:roller_coaster: &lt;code>:roller_coaster:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ship: &lt;code>:ship:&lt;/code>&lt;/td>
 &lt;td>:speedboat: &lt;code>:speedboat:&lt;/code>&lt;/td>
 &lt;td>:boat: &lt;code>:boat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sailboat: &lt;code>:sailboat:&lt;/code>&lt;/td>
 &lt;td>:rowboat: &lt;code>:rowboat:&lt;/code>&lt;/td>
 &lt;td>:anchor: &lt;code>:anchor:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rocket: &lt;code>:rocket:&lt;/code>&lt;/td>
 &lt;td>:airplane: &lt;code>:airplane:&lt;/code>&lt;/td>
 &lt;td>:helicopter: &lt;code>:helicopter:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:steam_locomotive: &lt;code>:steam_locomotive:&lt;/code>&lt;/td>
 &lt;td>:tram: &lt;code>:tram:&lt;/code>&lt;/td>
 &lt;td>:mountain_railway: &lt;code>:mountain_railway:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bike: &lt;code>:bike:&lt;/code>&lt;/td>
 &lt;td>:aerial_tramway: &lt;code>:aerial_tramway:&lt;/code>&lt;/td>
 &lt;td>:suspension_railway: &lt;code>:suspension_railway:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:mountain_cableway: &lt;code>:mountain_cableway:&lt;/code>&lt;/td>
 &lt;td>:tractor: &lt;code>:tractor:&lt;/code>&lt;/td>
 &lt;td>:blue_car: &lt;code>:blue_car:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:oncoming_automobile: &lt;code>:oncoming_automobile:&lt;/code>&lt;/td>
 &lt;td>:car: &lt;code>:car:&lt;/code>&lt;/td>
 &lt;td>:red_car: &lt;code>:red_car:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:taxi: &lt;code>:taxi:&lt;/code>&lt;/td>
 &lt;td>:oncoming_taxi: &lt;code>:oncoming_taxi:&lt;/code>&lt;/td>
 &lt;td>:articulated_lorry: &lt;code>:articulated_lorry:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bus: &lt;code>:bus:&lt;/code>&lt;/td>
 &lt;td>:oncoming_bus: &lt;code>:oncoming_bus:&lt;/code>&lt;/td>
 &lt;td>:rotating_light: &lt;code>:rotating_light:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:police_car: &lt;code>:police_car:&lt;/code>&lt;/td>
 &lt;td>:oncoming_police_car: &lt;code>:oncoming_police_car:&lt;/code>&lt;/td>
 &lt;td>:fire_engine: &lt;code>:fire_engine:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ambulance: &lt;code>:ambulance:&lt;/code>&lt;/td>
 &lt;td>:minibus: &lt;code>:minibus:&lt;/code>&lt;/td>
 &lt;td>:truck: &lt;code>:truck:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:train: &lt;code>:train:&lt;/code>&lt;/td>
 &lt;td>:station: &lt;code>:station:&lt;/code>&lt;/td>
 &lt;td>:train2: &lt;code>:train2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:bullettrain_front: &lt;code>:bullettrain_front:&lt;/code>&lt;/td>
 &lt;td>:bullettrain_side: &lt;code>:bullettrain_side:&lt;/code>&lt;/td>
 &lt;td>:light_rail: &lt;code>:light_rail:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:monorail: &lt;code>:monorail:&lt;/code>&lt;/td>
 &lt;td>:railway_car: &lt;code>:railway_car:&lt;/code>&lt;/td>
 &lt;td>:trolleybus: &lt;code>:trolleybus:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ticket: &lt;code>:ticket:&lt;/code>&lt;/td>
 &lt;td>:fuelpump: &lt;code>:fuelpump:&lt;/code>&lt;/td>
 &lt;td>:vertical_traffic_light: &lt;code>:vertical_traffic_light:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:traffic_light: &lt;code>:traffic_light:&lt;/code>&lt;/td>
 &lt;td>:warning: &lt;code>:warning:&lt;/code>&lt;/td>
 &lt;td>:construction: &lt;code>:construction:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:beginner: &lt;code>:beginner:&lt;/code>&lt;/td>
 &lt;td>:atm: &lt;code>:atm:&lt;/code>&lt;/td>
 &lt;td>:slot_machine: &lt;code>:slot_machine:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:busstop: &lt;code>:busstop:&lt;/code>&lt;/td>
 &lt;td>:barber: &lt;code>:barber:&lt;/code>&lt;/td>
 &lt;td>:hotsprings: &lt;code>:hotsprings:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:checkered_flag: &lt;code>:checkered_flag:&lt;/code>&lt;/td>
 &lt;td>:crossed_flags: &lt;code>:crossed_flags:&lt;/code>&lt;/td>
 &lt;td>:izakaya_lantern: &lt;code>:izakaya_lantern:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:moyai: &lt;code>:moyai:&lt;/code>&lt;/td>
 &lt;td>:circus_tent: &lt;code>:circus_tent:&lt;/code>&lt;/td>
 &lt;td>:performing_arts: &lt;code>:performing_arts:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:round_pushpin: &lt;code>:round_pushpin:&lt;/code>&lt;/td>
 &lt;td>:triangular_flag_on_post: &lt;code>:triangular_flag_on_post:&lt;/code>&lt;/td>
 &lt;td>:jp: &lt;code>:jp:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:kr: &lt;code>:kr:&lt;/code>&lt;/td>
 &lt;td>:cn: &lt;code>:cn:&lt;/code>&lt;/td>
 &lt;td>:us: &lt;code>:us:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:fr: &lt;code>:fr:&lt;/code>&lt;/td>
 &lt;td>:es: &lt;code>:es:&lt;/code>&lt;/td>
 &lt;td>:it: &lt;code>:it:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ru: &lt;code>:ru:&lt;/code>&lt;/td>
 &lt;td>:gb: &lt;code>:gb:&lt;/code>&lt;/td>
 &lt;td>:uk: &lt;code>:uk:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:de: &lt;code>:de:&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="symbols">Symbols&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>:one: &lt;code>:one:&lt;/code>&lt;/th>
 &lt;th>:two: &lt;code>:two:&lt;/code>&lt;/th>
 &lt;th>:three: &lt;code>:three:&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>:four: &lt;code>:four:&lt;/code>&lt;/td>
 &lt;td>:five: &lt;code>:five:&lt;/code>&lt;/td>
 &lt;td>:six: &lt;code>:six:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:seven: &lt;code>:seven:&lt;/code>&lt;/td>
 &lt;td>:eight: &lt;code>:eight:&lt;/code>&lt;/td>
 &lt;td>:nine: &lt;code>:nine:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:keycap_ten: &lt;code>:keycap_ten:&lt;/code>&lt;/td>
 &lt;td>:1234: &lt;code>:1234:&lt;/code>&lt;/td>
 &lt;td>:zero: &lt;code>:zero:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:hash: &lt;code>:hash:&lt;/code>&lt;/td>
 &lt;td>:symbols: &lt;code>:symbols:&lt;/code>&lt;/td>
 &lt;td>:arrow_backward: &lt;code>:arrow_backward:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_down: &lt;code>:arrow_down:&lt;/code>&lt;/td>
 &lt;td>:arrow_forward: &lt;code>:arrow_forward:&lt;/code>&lt;/td>
 &lt;td>:arrow_left: &lt;code>:arrow_left:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:capital_abcd: &lt;code>:capital_abcd:&lt;/code>&lt;/td>
 &lt;td>:abcd: &lt;code>:abcd:&lt;/code>&lt;/td>
 &lt;td>:abc: &lt;code>:abc:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_lower_left: &lt;code>:arrow_lower_left:&lt;/code>&lt;/td>
 &lt;td>:arrow_lower_right: &lt;code>:arrow_lower_right:&lt;/code>&lt;/td>
 &lt;td>:arrow_right: &lt;code>:arrow_right:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_up: &lt;code>:arrow_up:&lt;/code>&lt;/td>
 &lt;td>:arrow_upper_left: &lt;code>:arrow_upper_left:&lt;/code>&lt;/td>
 &lt;td>:arrow_upper_right: &lt;code>:arrow_upper_right:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_double_down: &lt;code>:arrow_double_down:&lt;/code>&lt;/td>
 &lt;td>:arrow_double_up: &lt;code>:arrow_double_up:&lt;/code>&lt;/td>
 &lt;td>:arrow_down_small: &lt;code>:arrow_down_small:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_heading_down: &lt;code>:arrow_heading_down:&lt;/code>&lt;/td>
 &lt;td>:arrow_heading_up: &lt;code>:arrow_heading_up:&lt;/code>&lt;/td>
 &lt;td>:leftwards_arrow_with_hook: &lt;code>:leftwards_arrow_with_hook:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_right_hook: &lt;code>:arrow_right_hook:&lt;/code>&lt;/td>
 &lt;td>:left_right_arrow: &lt;code>:left_right_arrow:&lt;/code>&lt;/td>
 &lt;td>:arrow_up_down: &lt;code>:arrow_up_down:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:arrow_up_small: &lt;code>:arrow_up_small:&lt;/code>&lt;/td>
 &lt;td>:arrows_clockwise: &lt;code>:arrows_clockwise:&lt;/code>&lt;/td>
 &lt;td>:arrows_counterclockwise: &lt;code>:arrows_counterclockwise:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:rewind: &lt;code>:rewind:&lt;/code>&lt;/td>
 &lt;td>:fast_forward: &lt;code>:fast_forward:&lt;/code>&lt;/td>
 &lt;td>:information_source: &lt;code>:information_source:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ok: &lt;code>:ok:&lt;/code>&lt;/td>
 &lt;td>:twisted_rightwards_arrows: &lt;code>:twisted_rightwards_arrows:&lt;/code>&lt;/td>
 &lt;td>:repeat: &lt;code>:repeat:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:repeat_one: &lt;code>:repeat_one:&lt;/code>&lt;/td>
 &lt;td>:new: &lt;code>:new:&lt;/code>&lt;/td>
 &lt;td>:top: &lt;code>:top:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:up: &lt;code>:up:&lt;/code>&lt;/td>
 &lt;td>:cool: &lt;code>:cool:&lt;/code>&lt;/td>
 &lt;td>:free: &lt;code>:free:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ng: &lt;code>:ng:&lt;/code>&lt;/td>
 &lt;td>:cinema: &lt;code>:cinema:&lt;/code>&lt;/td>
 &lt;td>:koko: &lt;code>:koko:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:signal_strength: &lt;code>:signal_strength:&lt;/code>&lt;/td>
 &lt;td>:u5272: &lt;code>:u5272:&lt;/code>&lt;/td>
 &lt;td>:u5408: &lt;code>:u5408:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:u55b6: &lt;code>:u55b6:&lt;/code>&lt;/td>
 &lt;td>:u6307: &lt;code>:u6307:&lt;/code>&lt;/td>
 &lt;td>:u6708: &lt;code>:u6708:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:u6709: &lt;code>:u6709:&lt;/code>&lt;/td>
 &lt;td>:u6e80: &lt;code>:u6e80:&lt;/code>&lt;/td>
 &lt;td>:u7121: &lt;code>:u7121:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:u7533: &lt;code>:u7533:&lt;/code>&lt;/td>
 &lt;td>:u7a7a: &lt;code>:u7a7a:&lt;/code>&lt;/td>
 &lt;td>:u7981: &lt;code>:u7981:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:sa: &lt;code>:sa:&lt;/code>&lt;/td>
 &lt;td>:restroom: &lt;code>:restroom:&lt;/code>&lt;/td>
 &lt;td>:mens: &lt;code>:mens:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:womens: &lt;code>:womens:&lt;/code>&lt;/td>
 &lt;td>:baby_symbol: &lt;code>:baby_symbol:&lt;/code>&lt;/td>
 &lt;td>:no_smoking: &lt;code>:no_smoking:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:parking: &lt;code>:parking:&lt;/code>&lt;/td>
 &lt;td>:wheelchair: &lt;code>:wheelchair:&lt;/code>&lt;/td>
 &lt;td>:metro: &lt;code>:metro:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:baggage_claim: &lt;code>:baggage_claim:&lt;/code>&lt;/td>
 &lt;td>:accept: &lt;code>:accept:&lt;/code>&lt;/td>
 &lt;td>:wc: &lt;code>:wc:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:potable_water: &lt;code>:potable_water:&lt;/code>&lt;/td>
 &lt;td>:put_litter_in_its_place: &lt;code>:put_litter_in_its_place:&lt;/code>&lt;/td>
 &lt;td>:secret: &lt;code>:secret:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:congratulations: &lt;code>:congratulations:&lt;/code>&lt;/td>
 &lt;td>:m: &lt;code>:m:&lt;/code>&lt;/td>
 &lt;td>:passport_control: &lt;code>:passport_control:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:left_luggage: &lt;code>:left_luggage:&lt;/code>&lt;/td>
 &lt;td>:customs: &lt;code>:customs:&lt;/code>&lt;/td>
 &lt;td>:ideograph_advantage: &lt;code>:ideograph_advantage:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:cl: &lt;code>:cl:&lt;/code>&lt;/td>
 &lt;td>:sos: &lt;code>:sos:&lt;/code>&lt;/td>
 &lt;td>:id: &lt;code>:id:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:no_entry_sign: &lt;code>:no_entry_sign:&lt;/code>&lt;/td>
 &lt;td>:underage: &lt;code>:underage:&lt;/code>&lt;/td>
 &lt;td>:no_mobile_phones: &lt;code>:no_mobile_phones:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:do_not_litter: &lt;code>:do_not_litter:&lt;/code>&lt;/td>
 &lt;td>:non-potable_water: &lt;code>:non-potable_water:&lt;/code>&lt;/td>
 &lt;td>:no_bicycles: &lt;code>:no_bicycles:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:no_pedestrians: &lt;code>:no_pedestrians:&lt;/code>&lt;/td>
 &lt;td>:children_crossing: &lt;code>:children_crossing:&lt;/code>&lt;/td>
 &lt;td>:no_entry: &lt;code>:no_entry:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:eight_spoked_asterisk: &lt;code>:eight_spoked_asterisk:&lt;/code>&lt;/td>
 &lt;td>:eight_pointed_black_star: &lt;code>:eight_pointed_black_star:&lt;/code>&lt;/td>
 &lt;td>:heart_decoration: &lt;code>:heart_decoration:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:vs: &lt;code>:vs:&lt;/code>&lt;/td>
 &lt;td>:vibration_mode: &lt;code>:vibration_mode:&lt;/code>&lt;/td>
 &lt;td>:mobile_phone_off: &lt;code>:mobile_phone_off:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:chart: &lt;code>:chart:&lt;/code>&lt;/td>
 &lt;td>:currency_exchange: &lt;code>:currency_exchange:&lt;/code>&lt;/td>
 &lt;td>:aries: &lt;code>:aries:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:taurus: &lt;code>:taurus:&lt;/code>&lt;/td>
 &lt;td>:gemini: &lt;code>:gemini:&lt;/code>&lt;/td>
 &lt;td>:cancer: &lt;code>:cancer:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:leo: &lt;code>:leo:&lt;/code>&lt;/td>
 &lt;td>:virgo: &lt;code>:virgo:&lt;/code>&lt;/td>
 &lt;td>:libra: &lt;code>:libra:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:scorpius: &lt;code>:scorpius:&lt;/code>&lt;/td>
 &lt;td>:sagittarius: &lt;code>:sagittarius:&lt;/code>&lt;/td>
 &lt;td>:capricorn: &lt;code>:capricorn:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:aquarius: &lt;code>:aquarius:&lt;/code>&lt;/td>
 &lt;td>:pisces: &lt;code>:pisces:&lt;/code>&lt;/td>
 &lt;td>:ophiuchus: &lt;code>:ophiuchus:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:six_pointed_star: &lt;code>:six_pointed_star:&lt;/code>&lt;/td>
 &lt;td>:negative_squared_cross_mark: &lt;code>:negative_squared_cross_mark:&lt;/code>&lt;/td>
 &lt;td>:a: &lt;code>:a:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:b: &lt;code>:b:&lt;/code>&lt;/td>
 &lt;td>:ab: &lt;code>:ab:&lt;/code>&lt;/td>
 &lt;td>:o2: &lt;code>:o2:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:diamond_shape_with_a_dot_inside: &lt;code>:diamond_shape_with_a_dot_inside:&lt;/code>&lt;/td>
 &lt;td>:recycle: &lt;code>:recycle:&lt;/code>&lt;/td>
 &lt;td>:end: &lt;code>:end:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:on: &lt;code>:on:&lt;/code>&lt;/td>
 &lt;td>:soon: &lt;code>:soon:&lt;/code>&lt;/td>
 &lt;td>:clock1: &lt;code>:clock1:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock130: &lt;code>:clock130:&lt;/code>&lt;/td>
 &lt;td>:clock10: &lt;code>:clock10:&lt;/code>&lt;/td>
 &lt;td>:clock1030: &lt;code>:clock1030:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock11: &lt;code>:clock11:&lt;/code>&lt;/td>
 &lt;td>:clock1130: &lt;code>:clock1130:&lt;/code>&lt;/td>
 &lt;td>:clock12: &lt;code>:clock12:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock1230: &lt;code>:clock1230:&lt;/code>&lt;/td>
 &lt;td>:clock2: &lt;code>:clock2:&lt;/code>&lt;/td>
 &lt;td>:clock230: &lt;code>:clock230:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock3: &lt;code>:clock3:&lt;/code>&lt;/td>
 &lt;td>:clock330: &lt;code>:clock330:&lt;/code>&lt;/td>
 &lt;td>:clock4: &lt;code>:clock4:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock430: &lt;code>:clock430:&lt;/code>&lt;/td>
 &lt;td>:clock5: &lt;code>:clock5:&lt;/code>&lt;/td>
 &lt;td>:clock530: &lt;code>:clock530:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock6: &lt;code>:clock6:&lt;/code>&lt;/td>
 &lt;td>:clock630: &lt;code>:clock630:&lt;/code>&lt;/td>
 &lt;td>:clock7: &lt;code>:clock7:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock730: &lt;code>:clock730:&lt;/code>&lt;/td>
 &lt;td>:clock8: &lt;code>:clock8:&lt;/code>&lt;/td>
 &lt;td>:clock830: &lt;code>:clock830:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:clock9: &lt;code>:clock9:&lt;/code>&lt;/td>
 &lt;td>:clock930: &lt;code>:clock930:&lt;/code>&lt;/td>
 &lt;td>:heavy_dollar_sign: &lt;code>:heavy_dollar_sign:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:copyright: &lt;code>:copyright:&lt;/code>&lt;/td>
 &lt;td>:registered: &lt;code>:registered:&lt;/code>&lt;/td>
 &lt;td>:tm: &lt;code>:tm:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:x: &lt;code>:x:&lt;/code>&lt;/td>
 &lt;td>:heavy_exclamation_mark: &lt;code>:heavy_exclamation_mark:&lt;/code>&lt;/td>
 &lt;td>:bangbang: &lt;code>:bangbang:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:interrobang: &lt;code>:interrobang:&lt;/code>&lt;/td>
 &lt;td>:o: &lt;code>:o:&lt;/code>&lt;/td>
 &lt;td>:heavy_multiplication_x: &lt;code>:heavy_multiplication_x:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:heavy_plus_sign: &lt;code>:heavy_plus_sign:&lt;/code>&lt;/td>
 &lt;td>:heavy_minus_sign: &lt;code>:heavy_minus_sign:&lt;/code>&lt;/td>
 &lt;td>:heavy_division_sign: &lt;code>:heavy_division_sign:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:white_flower: &lt;code>:white_flower:&lt;/code>&lt;/td>
 &lt;td>:100: &lt;code>:100:&lt;/code>&lt;/td>
 &lt;td>:heavy_check_mark: &lt;code>:heavy_check_mark:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:ballot_box_with_check: &lt;code>:ballot_box_with_check:&lt;/code>&lt;/td>
 &lt;td>:radio_button: &lt;code>:radio_button:&lt;/code>&lt;/td>
 &lt;td>:link: &lt;code>:link:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:curly_loop: &lt;code>:curly_loop:&lt;/code>&lt;/td>
 &lt;td>:wavy_dash: &lt;code>:wavy_dash:&lt;/code>&lt;/td>
 &lt;td>:part_alternation_mark: &lt;code>:part_alternation_mark:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:trident: &lt;code>:trident:&lt;/code>&lt;/td>
 &lt;td>:black_square: &lt;code>:black_square:&lt;/code>&lt;/td>
 &lt;td>:white_square: &lt;code>:white_square:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:white_check_mark: &lt;code>:white_check_mark:&lt;/code>&lt;/td>
 &lt;td>:black_square_button: &lt;code>:black_square_button:&lt;/code>&lt;/td>
 &lt;td>:white_square_button: &lt;code>:white_square_button:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:black_circle: &lt;code>:black_circle:&lt;/code>&lt;/td>
 &lt;td>:white_circle: &lt;code>:white_circle:&lt;/code>&lt;/td>
 &lt;td>:red_circle: &lt;code>:red_circle:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:large_blue_circle: &lt;code>:large_blue_circle:&lt;/code>&lt;/td>
 &lt;td>:large_blue_diamond: &lt;code>:large_blue_diamond:&lt;/code>&lt;/td>
 &lt;td>:large_orange_diamond: &lt;code>:large_orange_diamond:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:small_blue_diamond: &lt;code>:small_blue_diamond:&lt;/code>&lt;/td>
 &lt;td>:small_orange_diamond: &lt;code>:small_orange_diamond:&lt;/code>&lt;/td>
 &lt;td>:small_red_triangle: &lt;code>:small_red_triangle:&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>:small_red_triangle_down: &lt;code>:small_red_triangle_down:&lt;/code>&lt;/td>
 &lt;td>:shipit: &lt;code>:shipit:&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Hand-eye Calibration</title><link>https://bobblelaw.github.io/topics/calibration/extrinsics/handeye/</link><pubDate>Sat, 19 Nov 2022 21:04:51 +0800</pubDate><guid>https://bobblelaw.github.io/topics/calibration/extrinsics/handeye/</guid><description>&lt;p>&lt;em>TODO&lt;/em>&lt;/p></description></item><item><title>Camera Models</title><link>https://bobblelaw.github.io/topics/calibration/intrinsics/camera-model/</link><pubDate>Sat, 19 Nov 2022 21:03:21 +0800</pubDate><guid>https://bobblelaw.github.io/topics/calibration/intrinsics/camera-model/</guid><description>&lt;p>&lt;em>TODO&lt;/em>&lt;/p></description></item><item><title>LINEMOD</title><link>https://bobblelaw.github.io/topics/detection/6d-pose-estimation/linemod/</link><pubDate>Fri, 18 Nov 2022 19:15:31 +0800</pubDate><guid>https://bobblelaw.github.io/topics/detection/6d-pose-estimation/linemod/</guid><description>&lt;p>&lt;em>TODO&lt;/em>&lt;/p></description></item><item><title>Detection</title><link>https://bobblelaw.github.io/topics/detection/registration/point-pair-feature/</link><pubDate>Fri, 18 Nov 2022 19:14:11 +0800</pubDate><guid>https://bobblelaw.github.io/topics/detection/registration/point-pair-feature/</guid><description>&lt;p>&lt;em>TODO&lt;/em>&lt;/p></description></item><item><title>SLAM Interview Questions</title><link>https://bobblelaw.github.io/topics/interview/slam-interview/</link><pubDate>Thu, 27 Oct 2022 16:37:56 +0800</pubDate><guid>https://bobblelaw.github.io/topics/interview/slam-interview/</guid><description>&lt;h2 id="linear-algebra">Linear Algebra&lt;/h2>
&lt;ul>
&lt;li>如何求解 $Ax=b$？SVD和QR分解哪个更快？&lt;/li>
&lt;/ul>
&lt;p>Depend on the rank of $[A | b]$.&lt;/p>
&lt;p>Solution include QR decomposition, LTLD decomposition, Cholesky decomposition and SVD decomposition.&lt;/p>
&lt;h2 id="optimization-basics">Optimization Basics&lt;/h2>
&lt;ul>
&lt;li>Explain Gradient descent, Gaussian-Newton, LM, Dogleg&lt;/li>
&lt;/ul>
&lt;h2 id="computer-vision-basics">Computer Vision Basics&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>SIFT vs. SURF&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parallax and depth&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>$ \frac{parallax}{baseline} = \frac{focal~ length}{depth} $&lt;/p>
&lt;ul>
&lt;li>Edge detection algorithms&lt;/li>
&lt;/ul>
&lt;p>Filtering, augmentation, and detection. Gaussian filter and some handcrafted kernel to locate pixel gradient.&lt;/p>
&lt;ol>
&lt;li>Canny&lt;/li>
&lt;li>Sobel&lt;/li>
&lt;li>Laplacian&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Hoffman transform&lt;/li>
&lt;/ul>
&lt;h2 id="3d-basics">3D Basics&lt;/h2>
&lt;ul>
&lt;li>如何对匹配好的点做进一步的处理，已到达更好的效果？&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Compare the distance with experienced threshold&lt;/li>
&lt;li>RANSAC&lt;/li>
&lt;li>KNN&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>Explain RANSAC&lt;/p></description></item><item><title>rvalue ref-qualified assignment operators</title><link>https://bobblelaw.github.io/posts/delete-rvalue-ref-assignment/</link><pubDate>Sun, 22 Aug 2021 14:53:21 +0800</pubDate><guid>https://bobblelaw.github.io/posts/delete-rvalue-ref-assignment/</guid><description>&lt;p>The title might sound like an incantation to summon some mid-tier C++ god but it addresses a very real everyday pitfall:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> { ... };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo &lt;span style="color:#a6e22e">get_my_foo&lt;/span>() { ... }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// .. some code later:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>foo f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get_my_foo() &lt;span style="color:#f92672">=&lt;/span> f;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This &lt;a href="https://godbolt.org/z/oh3vFA">compiles&lt;/a> &amp;hellip; and does nothing useful.&lt;/p>
&lt;p>We&amp;rsquo;ve assigned &lt;code>f&lt;/code> to a temporary &lt;code>foo&lt;/code>.&lt;br>
No error, no warning.&lt;/p>
&lt;h2 id="a-real-life-example">A Real-Life Example&lt;/h2>
&lt;p>In the math library I&amp;rsquo;m writing we have a &lt;code>mat&lt;/code> struct for matrices and &lt;code>vec&lt;/code> for vectors.&lt;br>
Matrices are stored column-major, i.e. as an array of column vectors.&lt;br>
Now, sometimes you want to get the row of such matrix and thus &lt;code>mat&lt;/code> has a function &lt;code>vec mat::row(int)&lt;/code> that returns the specified row.&lt;br>
It has to return the &lt;code>vec&lt;/code> per value because only columns are stored contiguously in &lt;code>mat&lt;/code>:&lt;/p></description></item><item><title>Inlining Optimization</title><link>https://bobblelaw.github.io/posts/inline-optimization/</link><pubDate>Wed, 19 May 2021 17:29:41 +0800</pubDate><guid>https://bobblelaw.github.io/posts/inline-optimization/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Inline_expansion">Inlining&lt;/a> is one of the most important compiler optimizations.&lt;br>
We can often write abstractions and thin wrapper functions without incurring any performance penalty, because the compiler will expand the method for us at call site.&lt;/p>
&lt;p>If a function is not inlined, conventional wisdom says that the compiler has to assume that the method can modify any global state and change the memory behind any pointer or reference that might have &amp;ldquo;escaped&amp;rdquo;.&lt;/p></description></item><item><title>Multi-Level Loop Break</title><link>https://bobblelaw.github.io/posts/multi-level-break/</link><pubDate>Wed, 12 May 2021 09:57:09 +0800</pubDate><guid>https://bobblelaw.github.io/posts/multi-level-break/</guid><description>&lt;p>I guess we all have been at this point.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> i : ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> j : ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (condition(i, j))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span> outer&lt;span style="color:#f92672">???&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You want to search something, and for one reason or another you end up with a nested loop.&lt;br>
You find what you searched for and now want to &lt;code>break&lt;/code> all the way to the outer loop.&lt;/p>
&lt;p>If only we had multi-level &lt;code>breaks&lt;/code>.&lt;/p></description></item><item><title>Understanding Perspective-N-Points</title><link>https://bobblelaw.github.io/posts/understanding-pnp/</link><pubDate>Sun, 18 Apr 2021 15:17:26 +0800</pubDate><guid>https://bobblelaw.github.io/posts/understanding-pnp/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Perspective-n-Point (PnP) problem is the problem of estimating the relative pose between an object and the camera, given a set of correspondences between 3D points and their projections on the image plane.&lt;br>
It is a fundamental problem that was first studied in the photogrammetry literature, and later on studied in the context of computer vision.&lt;/p>
&lt;p>In this post, I will present a few solvers (among many), discuss their proofs and also show some concise implementations. I will focus on the minimal solvers - solutions to the PnP problem that requires the minimal amount of information. In this case, we need at least three pairs of correspondences, and the minimal solvers that only require three pairs of correspondences are called P3P solvers.&lt;/p></description></item><item><title>Understanding Automatic Differentiation</title><link>https://bobblelaw.github.io/posts/understanding-automatic-differentiation/</link><pubDate>Wed, 17 Mar 2021 20:47:18 +0800</pubDate><guid>https://bobblelaw.github.io/posts/understanding-automatic-differentiation/</guid><description>&lt;p>Deriving derivatives is not fun. In this post, I will deep dive into the methods for automatic differentiation (AD). After reading this post, I hope you can feel confident with using the various AD techniques, and hopefully never manually calculate derivatives again. Note that this post is not a comparison between AD libraries. For that, a good starting point is &lt;a href="">here&lt;/a>.&lt;/p>
&lt;h2 id="why-automatic-differentiation">Why Automatic Differentiation?&lt;/h2>
&lt;p>Automatic differentiation is a natural continuation of scientists and engineers’ pursuit for mechanizing computation. After all, we learn how to take derivatives by memorizing a set of rules. Why can’t computers do the same thing?&lt;/p></description></item><item><title>Moves in Returns</title><link>https://bobblelaw.github.io/posts/moves-in-return/</link><pubDate>Sat, 19 Dec 2020 14:39:20 +0800</pubDate><guid>https://bobblelaw.github.io/posts/moves-in-return/</guid><description>&lt;p>Today we&amp;rsquo;ll discuss code of the form:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>T &lt;span style="color:#a6e22e">work&lt;/span>(&lt;span style="color:#75715e">/* ... */&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a classical &amp;ldquo;return-by-value&amp;rdquo; and (wrongfully) associated with copies and overhead.&lt;/p>
&lt;p>In many cases, this will actually &lt;code>move&lt;/code> the result instead of copying it.&lt;br>
For modern C++, one could even argue that this will move in &lt;em>most&lt;/em> cases (or, as we will see, completely &lt;em>elide&lt;/em> the copy and directly construct in the result memory).&lt;/p></description></item><item><title>std::unordered_map Performance and Usage</title><link>https://bobblelaw.github.io/posts/unordered-map-usage-and-performance/</link><pubDate>Fri, 11 Dec 2020 09:36:58 +0800</pubDate><guid>https://bobblelaw.github.io/posts/unordered-map-usage-and-performance/</guid><description>&lt;h2 id="origin-story">Origin Story&lt;/h2>
&lt;p>We have always been told that hashmap is the best associative container that offer O(1) insert, delete, and lookup. However, the customization space of it is quite large and depending on the use case, the trade-off space can change radically.&lt;br>
&lt;code>std::unordered_map&lt;/code> is (in)famous for having an API that basically forces implementers to use &amp;ldquo;buckets with linked lists&amp;rdquo;, also known as &lt;em>separate chaining&lt;/em>.&lt;br>
Many performance-critical applications swear on &lt;em>open addressing&lt;/em>, often storing keys and values directly in arrays (either together or separate).&lt;br>
These are often called &lt;code>flat_&lt;/code>maps.&lt;br>
Many requirements and quality attributes influence which particular type is &amp;ldquo;best&amp;rdquo;:&lt;/p></description></item><item><title>Sort Multiple Ranges</title><link>https://bobblelaw.github.io/posts/sort-multiple-range/</link><pubDate>Sat, 28 Nov 2020 09:45:32 +0800</pubDate><guid>https://bobblelaw.github.io/posts/sort-multiple-range/</guid><description>&lt;p>&lt;code>std::sort&lt;/code> is a great utility.&lt;br>
You can easily sort subranges and provide custom comparison functions.&lt;br>
However, it struggles with the following scenario:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> keys &lt;span style="color:#f92672">=&lt;/span> ...;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> values &lt;span style="color:#f92672">=&lt;/span> ...;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>sort(...); &lt;span style="color:#75715e">// ???
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We want to sort by &lt;code>keys&lt;/code> but keep the 1-on-1 correspondence with &lt;code>values&lt;/code>, i.e. keep the ranges &amp;ldquo;in sync&amp;rdquo; during sorting.&lt;br>
A common solution is to allocate a vector of indices, sort these indices, and then apply the resulting permutation.&lt;br>
However, the need for an additional allocation and bad cache locality due to indirection make this a suboptimal solution.&lt;/p></description></item><item><title>range_ref&lt;T></title><link>https://bobblelaw.github.io/posts/range-ref/</link><pubDate>Thu, 12 Nov 2020 19:37:43 +0800</pubDate><guid>https://bobblelaw.github.io/posts/range-ref/</guid><description>&lt;p>Passing references to functions is great.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">some_user_type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>(some_user_type &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// freely read from v
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Memory management and lifetime handling is done by the caller.&lt;br>
Users of your function / API have a liberating amount of freedom how they organize their data: on the stack, on the heap, in smart pointers, in vectors, it doesn&amp;rsquo;t matter.&lt;br>
They can pass a reference to your function.&lt;br>
No (potentially expensive) copy is performed.&lt;/p></description></item><item><title>Recursive Lambdas</title><link>https://bobblelaw.github.io/posts/recursive-lambda-function/</link><pubDate>Sun, 08 Nov 2020 13:41:36 +0800</pubDate><guid>https://bobblelaw.github.io/posts/recursive-lambda-function/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">auto&lt;/span> fib &lt;span style="color:#f92672">=&lt;/span> [](&lt;span style="color:#66d9ef">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fib&lt;/span>(n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> fib(n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">auto&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> fib(&lt;span style="color:#ae81ff">7&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If only it were that simple.&lt;/p>
&lt;p>Obviously, any performance-conscious programmer will compute Fibonacci numbers iteratively (or even &lt;a href="https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression">explicitly&lt;/a>), but this solution will serve as an example for an underappreciated tool: &lt;em>recursive lambdas&lt;/em>.&lt;/p>
&lt;p>Lambdas are one of my favorite features in any programming language and while I long for a &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0573r1.html">shorter syntax in C++&lt;/a>, I still use them quite ubiquitously, especially for local functions.&lt;br>
They allow us to abstract behavior into a function while still accessing local variables (through captures) and without leaking new names into the surrounding namespace.&lt;br>
While already plenty powerful, sometimes we might want to call a lambda recursively.&lt;/p></description></item><item><title>Basic Floating Point Optimizations</title><link>https://bobblelaw.github.io/posts/floating-point-optimizations/</link><pubDate>Wed, 07 Aug 2019 09:08:11 +0800</pubDate><guid>https://bobblelaw.github.io/posts/floating-point-optimizations/</guid><description>&lt;p>Ever seen some people write &lt;code>f * 0.5&lt;/code> when they mean &lt;code>f / 2&lt;/code>?&lt;/p>
&lt;p>Or if the compiler is able to optimize the &lt;code>f * 1.0&lt;/code> that you added for clarity?&lt;/p>
&lt;p>Maybe you wrote &lt;code>f + f&lt;/code> instead of &lt;code>f * 2&lt;/code> as a clever optimization?&lt;/p>
&lt;p>Modern compilers are basically magic, &lt;em>but do they actually perform these optimizations?&lt;/em>&lt;br>
And, more importantly, &lt;em>why is &lt;code>f + 0.0&lt;/code> slower than &lt;code>f - 0.0&lt;/code>?&lt;/em>&lt;/p></description></item><item><title>Notes on Linux Development</title><link>https://bobblelaw.github.io/posts/notes-on-linux-dev/</link><pubDate>Fri, 17 Aug 2018 17:41:48 +0800</pubDate><guid>https://bobblelaw.github.io/posts/notes-on-linux-dev/</guid><description>&lt;h3 id="how-to-use-previous-version-of-gcc">How to use previous version of gcc&lt;/h3>
&lt;p>This problem arises when we try to compile mex file in Matlab. It shows a &lt;strong>warning&lt;/strong> as&lt;/p>
&lt;pre>&lt;code>Warning: You are using gcc version '7.x.x'. The version of gcc is not supported. 
The version currently supported with MEX is '6.4.x'. For a list of currently 
supported compilers see
&lt;/code>&lt;/pre>
&lt;p>An easy solution is to do as followed (simply install the target version),&lt;/p>
&lt;pre>&lt;code>sudo apt-get update &amp;amp;&amp;amp; \
sudo apt-get install build-essential software-properties-common -y &amp;amp;&amp;amp; \
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;amp;&amp;amp; \
sudo apt-get update &amp;amp;&amp;amp; \
sudo apt-get install gcc-6 g++-6 -y &amp;amp;&amp;amp; \
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 &amp;amp;&amp;amp; \
gcc -v
&lt;/code>&lt;/pre>
&lt;p>But this will affect the global gcc/g++, so we change the configure file for mex only,&lt;/p></description></item><item><title>How to Use CMake to Configure a Qt Project?</title><link>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</link><pubDate>Wed, 18 Oct 2017 17:26:42 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</guid><description>&lt;h3 id="a-simple-qt-code">A Simple Qt code&lt;/h3>
&lt;p>Here is a hello world code for Qt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;QtCore/QCoreApplication&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;QtCore/QDebug&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">**&lt;/span> argv){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> QCoreApplication app(argc, argv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> qDebug() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, Qt!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.exec()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>If we don&amp;rsquo;t use IDE or qmake, but compiler, this is the command&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>g++ main.cpp -I&lt;span style="color:#ae81ff">\\&lt;/span>path&lt;span style="color:#ae81ff">\t&lt;/span>o&lt;span style="color:#ae81ff">\Q&lt;/span>t&lt;span style="color:#ae81ff">\5&lt;/span>.13.0&lt;span style="color:#ae81ff">\i&lt;/span>nclude -o main -L&lt;span style="color:#ae81ff">\p&lt;/span>ath&lt;span style="color:#ae81ff">\t&lt;/span>o&lt;span style="color:#ae81ff">\Q&lt;/span>t&lt;span style="color:#ae81ff">\5&lt;/span>.13.0&lt;span style="color:#ae81ff">\l&lt;/span>ib -lQtCore4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>If we have qmake, all we need is&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-qmake" data-lang="qmake">CONFIG +=qt
QT -= gui
SOURCE += main.cpp
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>If we use cmake, our old friend CMakeList.txt comes to stage&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span>PROJECT(&lt;span style="color:#e6db74">example&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>FIND_PACKAGE(&lt;span style="color:#e6db74">Qt4&lt;/span> &lt;span style="color:#e6db74">COMPONENTS&lt;/span> &lt;span style="color:#e6db74">QtCore&lt;/span> &lt;span style="color:#e6db74">REQUIRED&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>INCLUDE(&lt;span style="color:#f92672">${&lt;/span>QT_USE_FILE&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>ADD_EXECUTABLE(&lt;span style="color:#e6db74">example&lt;/span> &lt;span style="color:#e6db74">main.cpp&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="a-complete-qt-project">A Complete Qt Project&lt;/h3>
&lt;p>Ususally a complete qt project would consist of the following files&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/interview/behavioral-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/interview/behavioral-interview/</guid><description>&lt;h1 id="behavioral-interviews">Behavioral Interviews&lt;/h1>
&lt;h2 id="amazon-leadership-principles">Amazon Leadership Principles&lt;/h2>
&lt;h3 id="customer-obsession">Customer Obsession&lt;/h3>
&lt;blockquote>
&lt;p>Amazonians are encouraged to find ways to delight the customer before they know they’d like to be delighted.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Tell me about a time when you strongly &lt;strong>disagreed&lt;/strong> with your manager or peer on something you considered very important to the business.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>S&lt;/strong>: During development of our factory calibration pipeline for robotic mowers, I strongly disagreed with my manager&amp;rsquo;s proposal to skip the camera reprojection validation step to save time in production.&lt;/li>
&lt;li>&lt;strong>T&lt;/strong>: The manager argued that since the calibration passed initial optimization with low residuals, we didn’t need a final projection check. But I believed that skipping this step could let silent failures (e.g. bad feature matches or incorrect chessboard detection) leak into production, which would degrade localization and ultimately hurt customer trust.&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>: I respectfully raised my concern in our calibration review, backed by data from a recent batch where two units had excellent residuals but failed real-world testing due to wrong board detections. I showed how reprojection visualization would’ve caught those immediately. I also proposed a fast implementation of this check that added just 2 seconds per unit. I emphasized that catching bad units early avoids costly field returns and rework.&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>: My manager agreed to test my proposal on the next 100 units. The check caught 3 failures that would’ve passed otherwise. It became a required step in our calibration line. This reinforced the value of speaking up with data—and balancing efficiency with long-term quality.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tell me about a time when you overcommitted yourself or your company.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/interview/cpp-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/interview/cpp-interview/</guid><description>&lt;h1 id="cpp-interview-questions">Cpp Interview Questions&lt;/h1>
&lt;h2 id="embedded-software-development-engineer">Embedded Software Development Engineer&lt;/h2>
&lt;h3 id="difference-between-serial-communication-protocols-like-i2c-spi-and-uart">Difference between Serial Communication protocols like I2C, SPI and UART&lt;/h3>
&lt;p>&lt;img src="https://media.licdn.com/dms/image/v2/D5612AQHZQKpJFd0INA/article-inline_image-shrink_1000_1488/B56ZU2XcHoHQAQ-/0/1740373869897?e=1752105600&amp;amp;v=beta&amp;amp;t=_1Jye7I5u_mmeYXEgkDqoFNYldSpvhXkZJmtMEVu3hY" alt="I2C, SPI and UART">&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Feature&lt;/th>
 &lt;th>UART&lt;br>(Universal Asynchronous Receiver Transmitter)&lt;/th>
 &lt;th>I2C&lt;br>(Inter-Integrated Circuit)&lt;/th>
 &lt;th>SPI&lt;br>(Serial Peripheral Interface)&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Wire&lt;/td>
 &lt;td>2 - TX(transmit), RX(receive)&lt;/td>
 &lt;td>2 - SDA(data), SCL(clock)&lt;/td>
 &lt;td>4+ - MOSI, MOSO, SCLK, SS (chip select), one CS per slave&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Speed&lt;/td>
 &lt;td>Low&lt;/td>
 &lt;td>Medium&lt;/td>
 &lt;td>High&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Communication&lt;/td>
 &lt;td>Asynchronous (no shared clock); devices must agree on baud rate&lt;/td>
 &lt;td>Synchronous, multi-master/multi-slave&lt;/td>
 &lt;td>Synchronous, full-duplex&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Topology&lt;/td>
 &lt;td>Point-to-Point&lt;/td>
 &lt;td>Multi-Slave&lt;/td>
 &lt;td>Multi-Slave with Chip Select(CS)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Use Case&lt;/td>
 &lt;td>Simple point-to-point communication (e.g. debug console, GPS modules)&lt;/td>
 &lt;td>Connecting multiple low-speed peripherals (e.g. sensors, EEPROM)&lt;/td>
 &lt;td>High-speed communication with sensors, flash, displays&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Answer:&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/interview/leetcode-top-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/interview/leetcode-top-interview/</guid><description>&lt;h1 id="leetcode-top-interview-questions">LeetCode Top Interview Questions&lt;/h1>
&lt;p>&lt;img src="https://img.shields.io/badge/Meta-%230467DF.svg?style=for-the-badge&amp;amp;logo=Meta&amp;amp;logoColor=white" alt="Meta">&lt;br>
&lt;img src="https://img.shields.io/badge/AWS-%23FF9900.svg?style=for-the-badge&amp;amp;logo=amazon-aws&amp;amp;logoColor=white" alt="AWS">&lt;br>
&lt;img src="https://img.shields.io/badge/google-4285F4?style=for-the-badge&amp;amp;logo=google&amp;amp;logoColor=white" alt="Google">&lt;br>
&lt;img src="https://img.shields.io/badge/Apple-%23000000.svg?style=for-the-badge&amp;amp;logo=apple&amp;amp;logoColor=white" alt="Apple">&lt;/p>
&lt;h2 id="array--hashing">Array &amp;amp; Hashing&lt;/h2>
&lt;h4 id="88-merge-sorted-array">&lt;a href="https://leetcode.com/problems/merge-sorted-array/">88. Merge Sorted Array&lt;/a>&lt;/h4>
&lt;p>&lt;img src="https://img.shields.io/badge/AWS-%23FF9900.svg?style=for-the-badge&amp;amp;logo=amazon-aws&amp;amp;logoColor=white" alt="AWS">&lt;/p>
&lt;p>&lt;strong>Keyword&lt;/strong>: Two-Pointer&lt;/p>
&lt;p>&lt;strong>Steps&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Two pointers, all start from two end (&lt;code>m-1&lt;/code> and &lt;code>n-1&lt;/code>)&lt;/li>
&lt;li>Iteration pointer starts from the very (&lt;code>m+n-1&lt;/code>) end
&lt;ul>
&lt;li>If &lt;code>nums[i1] &amp;gt; nums[i2]&lt;/code>, use &lt;code>nums[i1]&lt;/code>, move i1&lt;/li>
&lt;li>Else, use &lt;code>nums[i2]&lt;/code>, move i2&lt;/li>
&lt;li>Move i&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Copy the rest from &lt;code>nums&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Time: O(m+n), Space: O(1)&lt;/p>
&lt;h4 id="27-remove-item">&lt;a href="https://leetcode.com/problems/remove-element/">27. Remove Item&lt;/a>&lt;/h4>
&lt;p>&lt;strong>Keyword&lt;/strong>: Two-Pointer&lt;/p>
&lt;p>two pointers, one tracks valid number, one iterates.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/interview/ml-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/interview/ml-interview/</guid><description>&lt;h1 id="machine-learning-interview">Machine Learning Interview&lt;/h1>
&lt;ol>
&lt;li>&lt;strong>What is stratified cross-validation and when should we use it?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Why do ensembles typically have higher scores than individual models?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What is regularization? Can you give some examples of regularization techniques?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What is an imbalanced dataset? Can you list some ways to deal with it?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Why do we need a validation set and test set? What is the difference between them?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Can you explain the differences between supervised, unsupervised, and reinforcement learning?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What are some factors that explain the success and recent rise of deep learning?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What is data augmentation? Can you give some examples?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What are convolutional networks? Where can we use them?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>What is the curse of dimensionality? Can you list some ways to deal with it?&lt;/strong>&lt;/li>
&lt;/ol></description></item><item><title/><link>https://bobblelaw.github.io/topics/interview/system-design-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/interview/system-design-interview/</guid><description>&lt;h1 id="system-design-interview">System Design Interview&lt;/h1>
&lt;h2 id="embedded">Embedded&lt;/h2>
&lt;ul>
&lt;li>Design a state machine for a traffic light controller(Amazon)&lt;/li>
&lt;li>Design the LED behaviour of Apple Airpods(Apple)&lt;/li>
&lt;li>Design alexa for weather information(Amazon)&lt;/li>
&lt;li>Design VR glass(Meta)&lt;/li>
&lt;li>Design oculus game controller(Meta)&lt;/li>
&lt;li>Design apple pencil(Apple)&lt;/li>
&lt;li>Design an audio mixer (Asked at Meta Reality Lab)&lt;/li>
&lt;li>Design a microkernel-based system which can load a file and start execution. (Asked at Meta Reality Labs)&lt;/li>
&lt;li>Design a state machine for a vending machine at your office(Google)&lt;/li>
&lt;li>Design a telemetry service (Asked at Meta for Embedded Software Engineering role)&lt;/li>
&lt;li>Design a protocol to send data from the host to the device x bytes at a time. (Asked at Meta)&lt;/li>
&lt;li>Design a throwable Panoramic Ball Camera that Shoots 360-Degree Photos.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/01-devices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/01-devices/</guid><description>&lt;h1 id="devices">Devices&lt;/h1>
&lt;p>To get started, we will learn about &lt;strong>devices&lt;/strong>.&lt;/p>
&lt;p>A device is an abstraction of the graphics processing unit, or GPU, inside your iPhone or Mac. The GPU is a separate processor from the CPU and is specialized for different kinds of work. A big part of our job here is learning what GPUs are good at and how to program them.&lt;/p>
&lt;p>In code, a device is an object that conforms to the MTLDevice protocol. This protocol includes methods for allocating GPU resources, as well as many other kinds of objects. We will see many of these as we progress through our exploration of Metal.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/02-buffer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/02-buffer/</guid><description>&lt;h1 id="buffer">Buffer&lt;/h1>
&lt;p>In the previous article we got acquainted with Metal and learned a little about devices.&lt;/p>
&lt;p>In this article, we will start to allocate memory on the GPU in the form of &lt;em>buffers&lt;/em>. Buffers are essential to graphics programming, because they hold the data that the GPU operates on.&lt;/p>
&lt;h2 id="data">Data?&lt;/h2>
&lt;p>That’s a bit abstract, so let’s talk about &lt;em>what kinds&lt;/em> of data might be held in a buffer.&lt;/p>
&lt;p>In some graphics APIs, if you want to draw a line, there might be a function called &lt;code>drawLine&lt;/code> to draw a line segment, or perhaps a pair of functions called &lt;code>moveTo&lt;/code> and &lt;code>lineTo&lt;/code>, to specify where a line starts and ends.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/03-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/03-commands/</guid><description>&lt;h1 id="commands">Commands&lt;/h1>
&lt;p>So far in this series, we have talked about devices and buffers. Creating a device and asking it to allocate GPU memory are important tasks, but in order to put the GPU to work, we need to learn how to speak its language. We need to learn how to issue commands.&lt;/p>
&lt;h2 id="what-are-commands">What are Commands?&lt;/h2>
&lt;p>As mentioned in the previous article, Metal doesn’t have functions that let us simultaneously supply data and draw shapes. Providing data and issuing draw commands are separate operations, and they comprise the most common types of Metal commands.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/04-mtkview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/04-mtkview/</guid><description>&lt;h1 id="mtkview">MTKView&lt;/h1>
&lt;p>In the previous article, we got acquainted with Metal’s command submission model, including command queues, command buffers, and command encoders. In this article, we will meet the &lt;code>MTKView&lt;/code> class, which allows us to display the pictures we draw with Metal on the screen.&lt;/p>
&lt;h2 id="introducing-mtkview">Introducing MTKView&lt;/h2>
&lt;p>The &lt;code>MTKView&lt;/code> class is provided by the MetalKit framework. MetalKit is a small framework that provides higher-level utility types that make working with Metal easier.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/05-shaders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/05-shaders/</guid><description>&lt;h1 id="shaders">Shaders&lt;/h1>
&lt;p>In the previous article, we looked at how to start and end render passes by creating a render command encoder from a view’s render pass descriptor. We also saw how the act of executing a render pass can clear the contents of a texture to a solid color. Finally, we discussed how to present the cleared texture in the view.&lt;/p>
&lt;p>We are now ready to start writing code that runs on the GPU.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/06-pipelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/06-pipelines/</guid><description>&lt;h1 id="pipelines">Pipelines&lt;/h1>
&lt;p>Let’s recap what we’ve learned in the first five installments of this series.&lt;/p>
&lt;p>First, we learned about how to get a device object, which lets us allocate resources and create various other objects related to command submission. Then, we talked about creating buffers, a type of resource that holds the data to be used by the GPU in fulfilling our commands. Then, we talked about how to encode commands and submit them to the GPU for execution. Last time, we started to get acquainted with shaders, the programs we write that run on the GPU itself.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/07-drawing-in-2d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/07-drawing-in-2d/</guid><description>&lt;h1 id="drawing-in-2d">Drawing in 2D&lt;/h1>
&lt;p>Last time, we looked at how to create compute pipeline states from kernel functions so we can perform arbitrary computation on the GPU. This time, we’ll focus on a different kind of pipeline state: &lt;em>render pipeline states&lt;/em>.&lt;/p>
&lt;p>When you have to manage a lot of the moving parts yourself, rendering is a pretty complex task. By now, you probably appreciate just how much more work it is to do anything with Metal than other graphics APIs. Maybe you’ve also gotten a glimpse of how much more powerful and flexible Metal is as a GPU-oriented API. Or maybe not. But pretty soon, you’ll have a much better feel for your latent Metal superpowers.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/08-vertex-attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/08-vertex-attributes/</guid><description>&lt;h1 id="vertex-attribute">Vertex Attribute&lt;/h1>
&lt;p>In the previous article, we crossed the threshold from learning foundational concepts of Metal into actually drawing shapes with the GPU. In this article, we will augment the previous example by adding a new &lt;em>attribute&lt;/em> to our vertices — color — and learn how to simplify our vertex function signatures by using &lt;em>vertex descriptors&lt;/em>.&lt;/p>
&lt;h2 id="attributes-beyond-vertex-positions">Attributes: Beyond Vertex Positions&lt;/h2>
&lt;p>When writing our first vertex function, we took two parameters: a pointer to a buffer containing two-element float vectors (positions), and a vertex ID:&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/09-constants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/metal/thirty-days-of-metal/09-constants/</guid><description>&lt;h1 id="constants">Constants&lt;/h1>
&lt;p>Last time, we talked about how to add attributes to vertices so we could fill our triangle with smoothly shaded colors. In this article we will talk about how to pass constant data to shaders, which remains the same for all vertices in a draw call.&lt;/p>
&lt;h2 id="constant-data">Constant Data&lt;/h2>
&lt;p>We call this data &lt;em>constant&lt;/em> data because it doesn’t change between invocations of the shader function. This contrasts with both attribute data, which can change per-vertex, and interpolated data, which can change per-fragment. Some APIs (notably OpenGL) call these types of constant values &lt;em>uniforms&lt;/em>, while most others use the term &lt;em>constants&lt;/em>.&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/slam/msckf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/slam/msckf/</guid><description>&lt;h2 id="notations">Notations&lt;/h2>
&lt;h2 id="review-of-extended-kalman-filter">Review of Extended Kalman Filter&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
x_{k} &amp;amp;= f(x_{k-1}, u_{k-1}) + w_{k-1} \\
z_{k} &amp;amp;= h(x_{k}) + v_{k-1}
\end{align}
&lt;/code>&lt;/pre>&lt;p>where $w_{k} ∼ N(0, Q_{k})$, $v_{k} ∼ N(0, R_{k})$.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
_{G}^{B}\.{q}(t) &amp;amp;= \frac{1}{2} Ω(^{G}ω(t))_{G}^{B}q(t), ~ 
with ~ Ω(ω)= \begin{bmatrix}
 -[ω]_{×} &amp;amp; ω \\
 -ω^{T} &amp;amp; 0
 \end{bmatrix} \\
^{G}\.{p}(t) &amp;amp;= ~ ^{G}v(t) \\
^{G}\.{v}(t) &amp;amp;= ~ ^{G}a(t) \\
\.{b}_{g}(t) &amp;amp;= n_{w_{g}}(t) \\
\.{b}_{a}(t) &amp;amp;= n_{w_{a}}(t)
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
_{G}^{B}\.{q}(t) &amp;amp;= \frac{1}{2} Ω(^{G}ω(t))_{G}^{B}q(t), ~ 
with ~ Ω(ω)= \begin{bmatrix}
 -[ω]_{×} &amp;amp; ω \\
 -ω^{T} &amp;amp; 0
 \end{bmatrix} \\
^{G}\.{p}(t) &amp;amp;= ~ ^{G}v(t) \\
^{G}\.{v}(t) &amp;amp;= ~ ^{G}a(t) \\
\.{b}_{g}(t) &amp;amp;= n_{w_{g}}(t) \\
\.{b}_{a}(t) &amp;amp;= n_{w_{a}}(t)
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\bold{x}_{B} = [^{G}q_{B}^{T},~ ^{G}p_{B}^{T},~ ^{G}v_{B}^{T},~ b_{g}^{T},~ b_{a}^{T}]^{T}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\~{\bold{x}}_{B} = [^{G}\delta\theta_{B}^{T},~ ^{G}\~p_{B}^{T},~ ^{G}\~v_{B}^{T},~ \~b_{g}^{T},~ \~b_{a}^{T}]^{T}
&lt;/code>&lt;/pre>&lt;h2 id="complete-state-vector">Complete state vector&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{pmatrix} a&amp;amp;b\\c&amp;amp;d \end{pmatrix} \quad
\begin{bmatrix} a&amp;amp;b\\c&amp;amp;d \end{bmatrix} \quad
\begin{Bmatrix} a&amp;amp;b\\c&amp;amp;d \end{Bmatrix} \quad
\begin{vmatrix} a&amp;amp;b\\c&amp;amp;d \end{vmatrix} 
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{aligned}
x ={}&amp;amp; a+b+c+{} \\
&amp;amp;d+e+f+g
\end{aligned}
&lt;/code>&lt;/pre></description></item><item><title/><link>https://bobblelaw.github.io/topics/slam/vins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/slam/vins/</guid><description>&lt;p>&lt;em>WIP&lt;/em>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
_{G}^{B}\.{q}(t) &amp;amp;= \frac{1}{2} Ω(^{G}ω(t))_{G}^{B}q(t), ~ 
with ~ Ω(ω)= \begin{bmatrix}
 -[ω]_{×} &amp;amp; ω \\
 -ω^{T} &amp;amp; 0
 \end{bmatrix} \\
^{G}\.{p}(t) &amp;amp;= ~ ^{G}v(t) \\
^{G}\.{v}(t) &amp;amp;= ~ ^{G}a(t) \\
\.{b}_{g}(t) &amp;amp;= n_{w_{g}}(t) \\
\.{b}_{a}(t) &amp;amp;= n_{w_{a}}(t)
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\int u \frac{dv}{dx}\, dx=uv-\int \frac{du}{dx}v\,dx
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">p(\boldsymbol{x} | \boldsymbol{z}) = p(\boldsymbol{z} | \boldsymbol{x})p(\boldsymbol{x})
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">p(\boldsymbol{z} | \boldsymbol{x}) = \prod_{i} p(\boldsymbol{z_i} | \boldsymbol{x_i})
&lt;/code>&lt;/pre>&lt;p>For example,&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
 \~a_t &amp;amp;= a_t + ~ _w^T{R} ~ ^w{g} + b_{a_t} + n_a \\
 \~\omega &amp;amp;= \omega_t + b_{\omega_t} + n_\omega
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">n_a \sim N(0, \sigma_a^2) \\
n_{\omega} \sim N(0, \sigma_{\omega}^2)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
 _{B_{k+1}}^G{p} &amp;amp;=~ _{B_{k}}^G{p} +~ _{B_{k}}^G{v}\varDelta{t} + \iint_{[t_k, t_{k+1}]} a_t ~ dt^2 \\
 _{B_{k+1}}^G{v} &amp;amp;=~ _{B_{k}}^G{v} + \int_{[t_k, t_{k+1}]} a_t ~ dt \\
 _{B_{k+1}}^G{q} &amp;amp;=~ _{B_{k}}^G{q} \otimes \int_{[t_k, t_{k+1}]} \frac{1}{2} ~ ^{B_{k}}{q} \otimes 
 \begin{bmatrix}
 \omega_t \\
 0
 \end{bmatrix} dt 
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
 _G^{B_k}{R} ~ _{B_{k+1}}^G{p} &amp;amp;=~ _{B_{k}}^G{p} +~ _{B_{k}}^G{v}\varDelta{t} + \iint_{[t_k, t_{k+1}]} a_t ~ dt^2 \\
 _G^{B_k}{R} ~ _{B_{k+1}}^G{v} &amp;amp;=~ _{B_{k}}^G{v} + \int_{[t_k, t_{k+1}]} a_t ~ dt \\
 _G^{B_k}{q} \otimes _{B_{k+1}}^G{q} &amp;amp;=~ \gamma_{B_{k+1}}^{B_k}
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
 \alpha_{B_{k+1}}^{B_k} &amp;amp;= \iint_{[t_k, t_{k+1}]} {_{B_t}^{B_k}{R}(\^a_t-b_{a_t}-n_a)} ~ dt^2 \\
 \beta_{B_{k+1}}^{B_k} &amp;amp;= \int_{[t_k, t_{k+1}]} {_{B_t}^{B_k}{R}(\^a_t-b_{a_t}-n_a)} ~ dt \\
 \gamma_{B_{k+1}}^{B_k} &amp;amp;= \int_{[t_k, t_{k+1}]} {\frac{1}{2}\Omega(\~\omega_t - b_{\omega_t} - n_\omega)\gamma_{B_t}^{B_{k+1}}} dt 
\end{align}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-math" data-lang="math">\begin{align}
 \alpha_{B_{k+1}}^{B_k} &amp;amp;\approx \^\alpha_{B_{k+1}}^{B_k} + J_{b_a}^\alpha\delta{b_a} + J_{b_a}^\alpha\delta{b_\omega}\\
 \beta_{B_{k+1}}^{B_k} &amp;amp;\approx \^\beta_{B_{k+1}}^{B_k} + J_{b_a}^\beta\delta{b_a} + J_{b_a}^\beta\delta{b_\omega}\\
 \gamma_{B_{k+1}}^{B_k} &amp;amp;\approx \^\gamma_{B_{k+1}}^{B_k} \otimes \begin{bmatrix}
 1 \\
 \frac{1}{2}J_{b_\omega}^\gamma\delta{b_\omega}
 \end{bmatrix} 
\end{align}
&lt;/code>&lt;/pre>&lt;h3 id="question-purpose-of-pre-integration">Question: Purpose of pre-integration?&lt;/h3></description></item><item><title/><link>https://bobblelaw.github.io/topics/slam/vio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/slam/vio/</guid><description>&lt;h2 id="fej-explaination">FEJ Explaination&lt;/h2>
&lt;p>可观性问题会直接带来多传感器融合融态中的关键手段：FEJ First Estimated Jacobian.&lt;/p>
&lt;p>即不同残差对同一状态求Jacobian时，线性化点必须一致，以避免零空间null space退化而使不可观变量变可观。&lt;/p>
&lt;p>因此对其的理解是一件非常重要的事情。初学者在没有足够资料与文档解释的情况下，对其的理解是比较困难的。&lt;/p>
&lt;p>从业者应该都清楚，状态估计走到今天，前端已经进入了大成熟阶段，回环手段也较为一致(如word bag或语义)，后端优化是核心中的核心。而其中对于H矩阵/或信息矩阵的处理与维护是核心&lt;/p>
&lt;p>这类矩阵维护中，基于BA的滑动窗口滤波是基础手段之一，我们需要进行边缘化的同时传递先验信息(形成pose graph)，节约开销的同时能够将先验信息传递至下一个滑动窗口。&lt;/p>
&lt;p>现在我们将被Marginized后的变量描述为Xm，剩余的变量记为Xr&lt;/p>
&lt;p>Marginized后：先验信息经过舒尔补操作后分别由残差矩阵b与先验信息矩阵Λ构成&lt;/p>
&lt;p>这2个矩阵都由2个部分构成(具体构成就不写了)，对应的Jacobian和残差r需要由这2个矩阵通过正定方程(增量方程)反解出来&lt;/p>
&lt;p>但这样就出现了2个核心问题：&lt;/p>
&lt;ol>
&lt;li>被Marg后的变量与测量已经丢弃，先验信息矩阵Λ中关于Xr的Jacobian在后续求解中已无法更新&lt;/li>
&lt;li>Xr中部分变量还和其他残差有关，这些残差的Jacobian会随新的状态估计的迭代更新而不断在最新的线性化点中计算&lt;/li>
&lt;/ol>
&lt;p>则Λ变为了Λ1(线性化点固定)与Λ2（线性化点在变），这样最终将导致Λ的零空间改变，引入错误信息。这里导入线性代数的一个基础概念：满秩必可逆，转置逆不变，不满秩则有零空间。&lt;/p>
&lt;p>因此导入了FEJ&lt;/p>
&lt;p>可观性/能观性用最通俗和直观的方式来描述就是：状态一变，测量就变&lt;/p>
&lt;p>单目SLAM存在7自由度不可观：3旋转，3平移，尺度皆不可观&lt;br>
单目+IMU存在4自由度不可观：Yaw与3平移，pitch与roll因重力而可观，尺度因加速度计而可观&lt;/p>
&lt;p>因此大家在调试对应slam系统中，如果出现问题，一定要考虑到可观性/能观性问题。&lt;/p>
&lt;p>另外FEL在实际工程中也存在不少问题，待后续具体实验中详解&lt;/p>
&lt;p>Li Mingyang &amp;amp;&amp;amp; Huang Guoquan paper&lt;/p>
&lt;h2 id="where-the-drift-comes-from">Where the drift comes from?&lt;/h2>
&lt;p>整个VINS-MONO系统，较容易在系统静止或外力给予较大冲击时产生轨迹漂移，原因是imu的bias在预积分中持续发散，视觉重投影误差产生的约束失效(如静止)，先验约束可能会在LM的线性求解器中产生无法收敛的情况，导致后端优化完全失效，因视觉静止系统也无法回环。&lt;/p>
&lt;p>对这一类问题的定位方向如下&lt;/p>
&lt;ol>
&lt;li>标定方向：VINS-MONO对系统标定的要求很高，尤其是imu的内参标定如果不准确还会直接影响双传感器之间的外参，所以定位重心首先应该放在标定的准确性上。另外也应该检验可见光相机的标定准确性，可通过ORB-SLAM等进行验证&lt;/li>
&lt;li>对时方向，IMU与相机的对时是一个难度较大的事项，如果有MCU从传感器直读数据进行对时的话，会是一个比较好的方式，这样对应的td会比较小。但如果通过vins-mono自己的优化对时的话，实际是异步的方式，比较容易受到各种因素的干扰，如视觉数据通过网络输入产生的延时，通过VI数据接口进入主控中的vins系统处理也会有延时，这个问题目前我们还在处理当中&lt;/li>
&lt;li>imu本身的数据问题导致权重变化，使视觉约束无法再拉回imu的偏移，这个是之前定位问题的思路，但是实际位置姿态的估计是由3种核心约束构成的，后续定位过程中我们发现了先验约束是直接进入了无法迭代的状态，即在舒尔补或cholesky分解的过程就出现了严重问题，这个问题的定位需要更多的打印日志与数据分析，我们暂时排除了这种可能性将更多的精力放到了lamda数据NAN值上。为何在静止状态时视觉约束无法将imu轨迹漂移拉回，这个也是需要深度定位的问题，后续在问题解决后我们会给出分析与对应的解决手段.&lt;/li>
&lt;/ol>
&lt;h2 id="gaussian-distribution">Gaussian distribution&lt;/h2>
&lt;p>高翔博士的VSLAM十四讲是一本非常生动和工程的书籍，有助于初学者快速掌握相关的知识。但如果仅从14讲就切入行业的话，实际的困难有2方面，一方面是在真正的工程和商业落地中，硬件与PCBA的总体设计/供应链/大厂/方案商/生产商/商业竞争会带来一系列的问题(后续文章中会时不时提到)。另一方面是十四讲本身实在是写得太好和简单，容易让同学们自认为这个学科的简单快速的跳入工程，以忽略数理和基础知识的重要性。&lt;/p>
&lt;p>进入正题(理解如下部分与系列文章的后续部分需要较为扎实的线性代数基础，对概率导论中的Bayes法则清晰，熟悉高等数学中的求导/积分与链式法则)：整个讲解会以非常通俗甚至偏低智的方式完成，其目的是让大家能更简单的了解VSLAM与机器人状态估计领域并提起兴趣，可能会存在不少错误欢迎大家斧正。因为这个学科以及后续的多传感器融合融态的本质学习曲线确实是相当的陡峭。&lt;/p>
&lt;h3 id="高斯分布的2个重要概念">高斯分布的2个重要概念&lt;/h3>
&lt;p>expectation and variance. 分别对应到整个高斯在概率密度函数上的均值，在高斯分布上我们也可以将其理解为极小值或极大值，以及对应高斯分布这座小山的陡度或者斜率。&lt;/p>
&lt;p>简单带一嘴全概率公理：整个事件概率终值为1，也可以理解为概率密度/概率密度函数设值为1(其实是完全不同的概念，有兴趣的话可阅读MIT的概率导论)，可以理解为在x/y2轴平面图上通过积分反解出的面积。概率密度的零阶矩正好是整个全事件的概率个人理解的是，高斯分布在机器人状态估计中在大量应用，其期望与协方差的本质可以确定为状态估计本身的2种输入，分别以概率一阶矩与概率二阶矩来进行表述(对应泰勒展开)，直接对应于期望与方差/协方差(这2个其实是有差异的，但是初学者无需过多理会)高斯概率密度函数中的均值μ的英文表述为mean，与高斯分布的期望值是不同的概念&lt;/p>
&lt;h3 id="linear-and-non-linear">Linear and non-linear&lt;/h3>
&lt;p>实际机器人运动中所有涉及的状态估计均为非线性&lt;/p>
&lt;p>线性比较好理解，如在一个完全无风的篮球馆进行投篮触框之前的曲线(仅受重力影响，不要纠结地球自转行星引力了)，在一个材质完全一样的表面(又是一种假设)对底部材质完全一样的质量块给予一个推力带来的运动到停止的过程。&lt;/p>
&lt;p>从如上的2个小例子大家就会明白，纯粹的线性运动，实际几乎是不可能存在的理想状态。&lt;/p>
&lt;p>但凡事都有2个方面，极端非线性运动的情况，其实在机器人实际运动和操作中也是稀少的。绝大部分的机器人状态估计，在工业与民用范畴，都偏向于轻度或中度非线性。&lt;/p>
&lt;h3 id="大量地将线性高斯系统假设进实际工程">大量地将线性高斯系统假设进实际工程&lt;/h3>
&lt;p>从1和2大家就能看出来，实际真实的VSLAM与多传感器融合融态工程中，就是将大量实际非线性运动的状态估计，以线性高斯系统模拟和假设出来，并作出最接近的状态估计。这里面最常用的数学工具就是矩阵与最小二乘，因为第一篇主要讨论高斯分布，就不在这赘述了。后续会详解的以卡尔曼滤波/扩展卡尔曼滤波进行的状态估计也会与这块相关。&lt;/p>
&lt;h3 id="统计独立性与不相关性">统计独立性与不相关性&lt;/h3>
&lt;p>在这里我们只需要牢记在高斯系统或高斯概率密度函数中，统计独立性和不相关性是等价的。其实这2种特性在概率导论中有清晰的描述，就不赘述了。&lt;/p>
&lt;h3 id="香农信息与互信息">香农信息与互信息&lt;/h3>
&lt;p>此处我们需要牢记，这2种信息对应的均为以定量来刻画不确定性，且香农信息和互信息可以实现换算关系。香农信息H以求概率密度函数负ln对数的期望值方式实现。(ln和exp也广泛应用在机器人状态估计中，涉及李群李代数部分详解)。互信息表述2个随机变量x与y之间的当一个已知后另一个的不确定性减少了多少。在联合高斯分布估计状态信息时广泛应用。香农信息与互信息具备换算关系。&lt;/p>
&lt;h3 id="克拉美罗下界crlb与fisher-information-matrix">克拉美罗下界(CRLB)与Fisher information matrix&lt;/h3>
&lt;p>又是2个听起来很难懂的术语？克拉美罗下界是一种方法，定义为：大家可以理解为一个界限，界定了一个参数的真实值的无偏估计(机器人状态估计本质)的协方差Σ，可以由费歇尔信息矩阵I来定义边界(机器人状态估计学习与工程中最容易搞错的就是符号和矩阵名称，不同的书籍体系中用的对应描述都有区别，一定要注意)。最终起的结果是利用了已有观测值估计参数效果和估计方式好坏的标准。此处有一重要的关系：如果我们从高斯概率密度函数中进行了K次采样(即传感器测量)，且均为统计独立，则其费歇尔信息矩阵正好是高斯协方差Σ逆的K倍。其CRLB大于等于1/K*Σ。表明在CRLB处我们状态估计量的期望等于高斯概率密度函数的均值μ通俗说就是：在高斯概率密度函数下，状态估计值的不确定下界，随测量/观测值增加变得越来越小，正符合我们的要求与标准。&lt;/p>
&lt;h3 id="为何要使用联合高斯分布与联合高斯概率密度函数">为何要使用联合高斯分布与联合高斯概率密度函数？&lt;/h3>
&lt;p>这里有一个和工程紧密结合的通俗直观的解释：在机器人状态估计的过程中，我们需要得到的状态估计至少涉及空间中的2种关键变量：相机位置姿态C与路标位置姿态L，这样我们才能在完成相机位置姿态估计的同时完成建图。因为坐标系实际都是相对的。另外我们的测量值在多传感器融合融态中也有多种观测与测量，比如相机给予的观测值与视觉重投影误差，陀螺仪给予的测量值，轮速计或GPS/RTK给予的位置姿态测量值。 因此大量的使用联合高斯分布与联合高斯概率密度是常态。如经典卡尔曼的基础形式：旧的估计综合预测+测量，导入卡尔曼增益与革新量，输出新的估计。此处还需要注意归一化积，这是个很简单的概念就不赘述了，就是把多个高斯分布用某种数学形式加入一个归一化常数进行归一。大家只需要知道多个pdf(高斯概率密度函数)归一化后的结果仍然是pdf即可&lt;/p></description></item><item><title/><link>https://bobblelaw.github.io/topics/vision/demosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bobblelaw.github.io/topics/vision/demosaic/</guid><description/></item></channel></rss>