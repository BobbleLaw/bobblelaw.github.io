<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lo, Tszwan on Bobble Law</title><link>https://bobblelaw.github.io/authors/host/</link><description>Recent content in Lo, Tszwan on Bobble Law</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="#">Bobble Law&lt;/a> and &lt;a href="#">Stay Inc.&lt;/a></copyright><lastBuildDate>Sun, 20 Nov 2022 13:06:19 +0800</lastBuildDate><atom:link href="https://bobblelaw.github.io/authors/host/index.xml" rel="self" type="application/rss+xml"/><item><title>Extrinsic Calibration</title><link>https://bobblelaw.github.io/docs/calibration/extrinsics/</link><pubDate>Sun, 20 Nov 2022 13:06:19 +0800</pubDate><guid>https://bobblelaw.github.io/docs/calibration/extrinsics/</guid><description>Problem Statement The hand-eye calibration problem first appeared and got its name from the robotics community, where a camera (&amp;ldquo;eye&amp;rdquo;) was mounted on the gripper (&amp;ldquo;hand&amp;rdquo;) of a robot. The cameras was calibrated using a calibration pattern. Then the unknown transformation from the robot coordinate system to the calibration pattern coordinate system as well as the transformation from the camera to the hand coordinate system need to be estimated simultaneously.
Application Robot-Camera Calibration This is the standard hand-eye calibration problem: Calculate the camera-sensor transformation $\bold{X}$ by using several measurements $A_i$, $B_i$ (that give you $A$, $B$).</description></item><item><title>Hand-eye Calibration</title><link>https://bobblelaw.github.io/docs/calibration/extrinsics/handeye/</link><pubDate>Sat, 19 Nov 2022 21:04:51 +0800</pubDate><guid>https://bobblelaw.github.io/docs/calibration/extrinsics/handeye/</guid><description>TODO</description></item><item><title>Intrinsic Calibration</title><link>https://bobblelaw.github.io/docs/calibration/intrinsics/</link><pubDate>Sat, 19 Nov 2022 21:02:42 +0800</pubDate><guid>https://bobblelaw.github.io/docs/calibration/intrinsics/</guid><description>TODO</description></item><item><title>Calibration</title><link>https://bobblelaw.github.io/docs/calibration/</link><pubDate>Sat, 19 Nov 2022 21:01:53 +0800</pubDate><guid>https://bobblelaw.github.io/docs/calibration/</guid><description>TODO
The content under this topic will come with CalibKit library.</description></item><item><title>6 DoF Pose Estimation</title><link>https://bobblelaw.github.io/docs/detection/6d-pose-estimation/</link><pubDate>Fri, 18 Nov 2022 19:15:52 +0800</pubDate><guid>https://bobblelaw.github.io/docs/detection/6d-pose-estimation/</guid><description>TODO</description></item><item><title>LINEMOD</title><link>https://bobblelaw.github.io/docs/detection/6d-pose-estimation/linemod/</link><pubDate>Fri, 18 Nov 2022 19:15:31 +0800</pubDate><guid>https://bobblelaw.github.io/docs/detection/6d-pose-estimation/linemod/</guid><description>TODO</description></item><item><title>Detection</title><link>https://bobblelaw.github.io/docs/detection/registration/point-pair-feature/</link><pubDate>Fri, 18 Nov 2022 19:14:11 +0800</pubDate><guid>https://bobblelaw.github.io/docs/detection/registration/point-pair-feature/</guid><description>TODO</description></item><item><title>Point Registration</title><link>https://bobblelaw.github.io/docs/detection/registration/</link><pubDate>Fri, 18 Nov 2022 19:13:28 +0800</pubDate><guid>https://bobblelaw.github.io/docs/detection/registration/</guid><description>TODO</description></item><item><title>Detection</title><link>https://bobblelaw.github.io/docs/detection/</link><pubDate>Fri, 18 Nov 2022 19:12:49 +0800</pubDate><guid>https://bobblelaw.github.io/docs/detection/</guid><description>TODO
The content under this topic will come with DetectionKit library</description></item><item><title>Geometry Analysis</title><link>https://bobblelaw.github.io/docs/geometry/</link><pubDate>Fri, 18 Nov 2022 16:37:26 +0800</pubDate><guid>https://bobblelaw.github.io/docs/geometry/</guid><description>TODO</description></item><item><title>Neural Network based 3D Modeling</title><link>https://bobblelaw.github.io/docs/modeling/nn/</link><pubDate>Wed, 16 Nov 2022 15:54:25 +0800</pubDate><guid>https://bobblelaw.github.io/docs/modeling/nn/</guid><description>TODO</description></item><item><title>Stereo Vision</title><link>https://bobblelaw.github.io/docs/modeling/stereo/</link><pubDate>Wed, 16 Nov 2022 15:53:31 +0800</pubDate><guid>https://bobblelaw.github.io/docs/modeling/stereo/</guid><description>TODO</description></item><item><title>Images-based Modeling</title><link>https://bobblelaw.github.io/docs/modeling/sfm/</link><pubDate>Wed, 16 Nov 2022 15:51:06 +0800</pubDate><guid>https://bobblelaw.github.io/docs/modeling/sfm/</guid><description>TODO</description></item><item><title>Structured Light System</title><link>https://bobblelaw.github.io/docs/modeling/structured-light/</link><pubDate>Wed, 16 Nov 2022 15:42:51 +0800</pubDate><guid>https://bobblelaw.github.io/docs/modeling/structured-light/</guid><description>WIP
This winter I am going to finish my master degree in UST. In the pass two years, I spent most of my time digging into structured light systems, 3D scanning and object pose estimation, like real deep. Until now two structured light systems, each of which consists of a PointGrey Camera and a TI DLP3000/4500 EVM, are successfully deployed on two manipulators (UR5). With my software, they are capable of
Project custom patterns designed for different types of objects; Tracking object with simple surface geometry under low moving speed; Tracking object 6 DoF pose based on known CAD with single RGB camera; View planning based on current scan quality, and SL execusive paramters; Communicate via ROS to move the manipulator.</description></item><item><title>3D Modeling</title><link>https://bobblelaw.github.io/docs/modeling/</link><pubDate>Wed, 16 Nov 2022 15:41:22 +0800</pubDate><guid>https://bobblelaw.github.io/docs/modeling/</guid><description>TODO
The content under this topic will come with ModelKit library</description></item><item><title>SLAM Interview FAQs</title><link>https://bobblelaw.github.io/posts/slam-interview-faq/</link><pubDate>Thu, 27 Oct 2022 16:37:56 +0800</pubDate><guid>https://bobblelaw.github.io/posts/slam-interview-faq/</guid><description>Linear Algebra 如何求解 $Ax=b$？SVD和QR分解哪个更快？ Depend on the rank of $[A | b]$.
Solution include QR decomposition, LTLD decomposition, Cholesky decomposition and SVD decomposition.
Optimization Basics Explain Gradient descent, Gaussian-Newton, LM, Dogleg Computer Vision Basics SIFT vs. SURF
Parallax and depth
$ \frac{parallax}{baseline} = \frac{focal~ length}{depth} $
Edge detection algorithms Filtering, augmentation, and detection. Gaussian filter and some handcrafted kernel to locate pixel gradient.
Canny Sobel Laplacian Hoffman transform 3D Basics 如何对匹配好的点做进一步的处理，已到达更好的效果？ Compare the distance with experienced threshold RANSAC KNN Explain RANSAC</description></item><item><title>Inlining Optimization</title><link>https://bobblelaw.github.io/posts/inline-optimization/</link><pubDate>Wed, 19 May 2021 17:29:41 +0800</pubDate><guid>https://bobblelaw.github.io/posts/inline-optimization/</guid><description>Inlining is one of the most important compiler optimizations. We can often write abstractions and thin wrapper functions without incurring any performance penalty, because the compiler will expand the method for us at call site.
If a function is not inlined, conventional wisdom says that the compiler has to assume that the method can modify any global state and change the memory behind any pointer or reference that might have &amp;ldquo;escaped&amp;rdquo;.
In this short post, I&amp;rsquo;ll demonstrate exactly this effect.</description></item><item><title>Multi-Level Loop Break</title><link>https://bobblelaw.github.io/posts/multi-level-break/</link><pubDate>Wed, 12 May 2021 09:57:09 +0800</pubDate><guid>https://bobblelaw.github.io/posts/multi-level-break/</guid><description>I guess we all have been at this point.
for (auto i : ...) for (auto j : ...) if (condition(i, j)) { break outer??? } You want to search something, and for one reason or another you end up with a nested loop. You find what you searched for and now want to break all the way to the outer loop.
If only we had multi-level breaks.
But we don&amp;rsquo;t.
So people introduce flags:</description></item><item><title>Understanding Perspective-N-Points</title><link>https://bobblelaw.github.io/posts/understanding-pnp/</link><pubDate>Sun, 18 Apr 2021 15:17:26 +0800</pubDate><guid>https://bobblelaw.github.io/posts/understanding-pnp/</guid><description>Introduction The Perspective-n-Point (PnP) problem is the problem of estimating the relative pose between an object and the camera, given a set of correspondences between 3D points and their projections on the image plane. It is a fundamental problem that was first studied in the photogrammetry literature, and later on studied in the context of computer vision.
In this post, I will present a few solvers (among many), discuss their proofs and also show some concise implementations.</description></item><item><title>Understanding Automatic Differentiation</title><link>https://bobblelaw.github.io/posts/understanding-automatic-differentiation/</link><pubDate>Wed, 17 Mar 2021 20:47:18 +0800</pubDate><guid>https://bobblelaw.github.io/posts/understanding-automatic-differentiation/</guid><description>Deriving derivatives is not fun. In this post, I will deep dive into the methods for automatic differentiation (AD). After reading this post, I hope you can feel confident with using the various AD techniques, and hopefully never manually calculate derivatives again. Note that this post is not a comparison between AD libraries. For that, a good starting point is here.
Why Automatic Differentiation? Automatic differentiation is a natural continuation of scientists and engineers’ pursuit for mechanizing computation.</description></item><item><title>Moves in Returns</title><link>https://bobblelaw.github.io/posts/moves-in-return/</link><pubDate>Sat, 19 Dec 2020 14:39:20 +0800</pubDate><guid>https://bobblelaw.github.io/posts/moves-in-return/</guid><description>Today we&amp;rsquo;ll discuss code of the form:
T work(/* ... */) { /* ... */ return x; } This is a classical &amp;ldquo;return-by-value&amp;rdquo; and (wrongfully) associated with copies and overhead.
In many cases, this will actually move the result instead of copying it. For modern C++, one could even argue that this will move in most cases (or, as we will see, completely elide the copy and directly construct in the result memory).
This post discusses several common patterns and if they are moved, copies, or elided.</description></item><item><title>std::unordered_map Performance and Usage</title><link>https://bobblelaw.github.io/posts/unordered-map-usage-and-performance/</link><pubDate>Fri, 11 Dec 2020 09:36:58 +0800</pubDate><guid>https://bobblelaw.github.io/posts/unordered-map-usage-and-performance/</guid><description>Origin Story We have always been told that hashmap is the best associative container that offer O(1) insert, delete, and lookup. However, the customization space of it is quite large and depending on the use case, the trade-off space can change radically. std::unordered_map is (in)famous for having an API that basically forces implementers to use &amp;ldquo;buckets with linked lists&amp;rdquo;, also known as separate chaining. Many performance-critical applications swear on open addressing, often storing keys and values directly in arrays (either together or separate).</description></item><item><title>Sort Multiple Ranges</title><link>https://bobblelaw.github.io/posts/sort-multiple-range/</link><pubDate>Sat, 28 Nov 2020 09:45:32 +0800</pubDate><guid>https://bobblelaw.github.io/posts/sort-multiple-range/</guid><description>std::sort is a great utility. You can easily sort subranges and provide custom comparison functions. However, it struggles with the following scenario:
std::vector&amp;lt;int&amp;gt; keys = ...; std::vector&amp;lt;std::string&amp;gt; values = ...; std::sort(...); // ??? We want to sort by keys but keep the 1-on-1 correspondence with values, i.e. keep the ranges &amp;ldquo;in sync&amp;rdquo; during sorting. A common solution is to allocate a vector of indices, sort these indices, and then apply the resulting permutation. However, the need for an additional allocation and bad cache locality due to indirection make this a suboptimal solution.</description></item><item><title>range_ref&lt;T></title><link>https://bobblelaw.github.io/posts/range-ref/</link><pubDate>Thu, 12 Nov 2020 19:37:43 +0800</pubDate><guid>https://bobblelaw.github.io/posts/range-ref/</guid><description>Passing references to functions is great.
struct some_user_type; void foo(some_user_type const&amp;amp; v) { // freely read from v } Memory management and lifetime handling is done by the caller. Users of your function / API have a liberating amount of freedom how they organize their data: on the stack, on the heap, in smart pointers, in vectors, it doesn&amp;rsquo;t matter. They can pass a reference to your function. No (potentially expensive) copy is performed.
From an API perspective, C++ references are views on a single object.</description></item><item><title>Recursive Lambdas</title><link>https://bobblelaw.github.io/posts/recursive-lambda-function/</link><pubDate>Sun, 08 Nov 2020 13:41:36 +0800</pubDate><guid>https://bobblelaw.github.io/posts/recursive-lambda-function/</guid><description>auto fib = [](int n) { if (n &amp;lt;= 1) return n; return fib(n - 1) + fib(n - 2); }; auto i = fib(7); If only it were that simple.
Obviously, any performance-conscious programmer will compute Fibonacci numbers iteratively (or even explicitly), but this solution will serve as an example for an underappreciated tool: recursive lambdas.
Lambdas are one of my favorite features in any programming language and while I long for a shorter syntax in C++, I still use them quite ubiquitously, especially for local functions.</description></item><item><title>How to Become a Video Game Designer?</title><link>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</link><pubDate>Thu, 12 Sep 2019 11:14:27 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</guid><description>This is some notes that I used for preparing the Game Designer position in Tencent.
You will read about
Career path Education Work experience Game Design vs. Game Development First of all, we need to talk about the difference between game design and game development.
These two are sometimes interchangeable but distinct.
Game Designer needs to know
game concept mechanics storyline while Game developer tends to know
animation engine programming Here are some websites you defintely should take a look to learn how to become a good game designer.</description></item><item><title>Notes on Linux Development</title><link>https://bobblelaw.github.io/posts/notes-on-linux-dev/</link><pubDate>Fri, 17 Aug 2018 17:41:48 +0800</pubDate><guid>https://bobblelaw.github.io/posts/notes-on-linux-dev/</guid><description>How to use previous version of gcc This problem arises when we try to compile mex file in Matlab. It shows a warning as
Warning: You are using gcc version '7.x.x'. The version of gcc is not supported. The version currently supported with MEX is '6.4.x'. For a list of currently supported compilers see An easy solution is to do as followed (simply install the target version),
sudo apt-get update &amp;amp;&amp;amp; \ sudo apt-get install build-essential software-properties-common -y &amp;amp;&amp;amp; \ sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;amp;&amp;amp; \ sudo apt-get update &amp;amp;&amp;amp; \ sudo apt-get install gcc-6 g++-6 -y &amp;amp;&amp;amp; \ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 &amp;amp;&amp;amp; \ gcc -v But this will affect the global gcc/g++, so we change the configure file for mex only,</description></item><item><title>How to Use CMake to Configure a Qt Project?</title><link>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</link><pubDate>Wed, 18 Oct 2017 17:26:42 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</guid><description>A Simple Qt code Here is a hello world code for Qt
#include &amp;lt;QtCore/QCoreApplication&amp;gt; #include &amp;lt;QtCore/QDebug&amp;gt; int main(int argc, char** argv){ QCoreApplication app(argc, argv); qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, Qt!&amp;quot;; app.exec() } If we don&amp;rsquo;t use IDE or qmake, but compiler, this is the command g++ main.cpp -I\\path\to\Qt\5.13.0\include -o main -L\path\to\Qt\5.13.0\lib -lQtCore4 If we have qmake, all we need is CONFIG +=qt QT -= gui SOURCE += main.cpp If we use cmake, our old friend CMakeList.txt comes to stage PROJECT(example) FIND_PACKAGE(Qt4 COMPONENTS QtCore REQUIRED) INCLUDE(${QT_USE_FILE}) ADD_EXECUTABLE(example main.</description></item></channel></rss>