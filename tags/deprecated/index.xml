<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deprecated on Bobble Law</title><link>https://bobblelaw.github.io/tags/deprecated/</link><description>Recent content in deprecated on Bobble Law</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="#">Bobble Law&lt;/a> and &lt;a href="#">Stay Inc.&lt;/a></copyright><lastBuildDate>Thu, 12 Sep 2019 11:14:27 +0800</lastBuildDate><atom:link href="https://bobblelaw.github.io/tags/deprecated/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Become a Video Game Designer?</title><link>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</link><pubDate>Thu, 12 Sep 2019 11:14:27 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</guid><description>This is some notes that I used for preparing the Game Designer position in Tencent.
You will read about
Career path Education Work experience Game Design vs. Game Development First of all, we need to talk about the difference between game design and game development.
These two are sometimes interchangeable but distinct.
Game Designer needs to know
game concept mechanics storyline while Game developer tends to know
animation engine programming Here are some websites you defintely should take a look to learn how to become a good game designer.</description></item><item><title>Notes on Linux Development</title><link>https://bobblelaw.github.io/posts/notes-on-linux-dev/</link><pubDate>Fri, 17 Aug 2018 17:41:48 +0800</pubDate><guid>https://bobblelaw.github.io/posts/notes-on-linux-dev/</guid><description>How to use previous version of gcc This problem arises when we try to compile mex file in Matlab. It shows a warning as
Warning: You are using gcc version '7.x.x'. The version of gcc is not supported. The version currently supported with MEX is '6.4.x'. For a list of currently supported compilers see An easy solution is to do as followed (simply install the target version),
sudo apt-get update &amp;amp;&amp;amp; \ sudo apt-get install build-essential software-properties-common -y &amp;amp;&amp;amp; \ sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;amp;&amp;amp; \ sudo apt-get update &amp;amp;&amp;amp; \ sudo apt-get install gcc-6 g++-6 -y &amp;amp;&amp;amp; \ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 &amp;amp;&amp;amp; \ gcc -v But this will affect the global gcc/g++, so we change the configure file for mex only,</description></item><item><title>How to Use CMake to Configure a Qt Project?</title><link>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</link><pubDate>Wed, 18 Oct 2017 17:26:42 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</guid><description>A Simple Qt code Here is a hello world code for Qt
#include &amp;lt;QtCore/QCoreApplication&amp;gt; #include &amp;lt;QtCore/QDebug&amp;gt; int main(int argc, char** argv){ QCoreApplication app(argc, argv); qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, Qt!&amp;quot;; app.exec() } If we don&amp;rsquo;t use IDE or qmake, but compiler, this is the command g++ main.cpp -I\\path\to\Qt\5.13.0\include -o main -L\path\to\Qt\5.13.0\lib -lQtCore4 If we have qmake, all we need is CONFIG +=qt QT -= gui SOURCE += main.cpp If we use cmake, our old friend CMakeList.txt comes to stage PROJECT(example) FIND_PACKAGE(Qt4 COMPONENTS QtCore REQUIRED) INCLUDE(${QT_USE_FILE}) ADD_EXECUTABLE(example main.</description></item></channel></rss>