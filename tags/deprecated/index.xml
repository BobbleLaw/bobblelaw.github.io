<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deprecated on Bobble Law</title><link>https://bobblelaw.github.io/tags/deprecated/</link><description>Recent content in Deprecated on Bobble Law</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sun, 20 Nov 2022 22:52:56 +0800</lastBuildDate><atom:link href="https://bobblelaw.github.io/tags/deprecated/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Become a Video Game Designer?</title><link>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</link><pubDate>Thu, 12 Sep 2019 11:14:27 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-become-a-video-game-designer/</guid><description>&lt;p>This is some notes that I used for preparing the Game Designer position in Tencent.&lt;/p>
&lt;p>&lt;strong>You will read about&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Career path&lt;/li>
&lt;li>Education&lt;/li>
&lt;li>Work experience&lt;/li>
&lt;/ul>
&lt;h3 id="game-design-vs-game-development">Game Design vs. Game Development&lt;/h3>
&lt;p>First of all, we need to talk about the difference between game design and game development.&lt;/p>
&lt;p>These two are sometimes interchangeable but distinct.&lt;/p>
&lt;p>&lt;strong>Game Designer&lt;/strong> needs to know&lt;/p>
&lt;ul>
&lt;li>game concept&lt;/li>
&lt;li>mechanics&lt;/li>
&lt;li>storyline&lt;/li>
&lt;/ul>
&lt;p>while &lt;strong>Game developer&lt;/strong> tends to know&lt;/p>
&lt;ul>
&lt;li>animation&lt;/li>
&lt;li>engine programming&lt;/li>
&lt;/ul>
&lt;p>Here are some websites you defintely should take a look to learn how to become a good game designer.&lt;/p></description></item><item><title>Notes on Linux Development</title><link>https://bobblelaw.github.io/posts/notes-on-linux-dev/</link><pubDate>Fri, 17 Aug 2018 17:41:48 +0800</pubDate><guid>https://bobblelaw.github.io/posts/notes-on-linux-dev/</guid><description>&lt;h3 id="how-to-use-previous-version-of-gcc">How to use previous version of gcc&lt;/h3>
&lt;p>This problem arises when we try to compile mex file in Matlab. It shows a &lt;strong>warning&lt;/strong> as&lt;/p>
&lt;pre>&lt;code>Warning: You are using gcc version '7.x.x'. The version of gcc is not supported. 
The version currently supported with MEX is '6.4.x'. For a list of currently 
supported compilers see
&lt;/code>&lt;/pre>
&lt;p>An easy solution is to do as followed (simply install the target version),&lt;/p>
&lt;pre>&lt;code>sudo apt-get update &amp;amp;&amp;amp; \
sudo apt-get install build-essential software-properties-common -y &amp;amp;&amp;amp; \
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;amp;&amp;amp; \
sudo apt-get update &amp;amp;&amp;amp; \
sudo apt-get install gcc-6 g++-6 -y &amp;amp;&amp;amp; \
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 &amp;amp;&amp;amp; \
gcc -v
&lt;/code>&lt;/pre>
&lt;p>But this will affect the global gcc/g++, so we change the configure file for mex only,&lt;/p></description></item><item><title>How to Use CMake to Configure a Qt Project?</title><link>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</link><pubDate>Wed, 18 Oct 2017 17:26:42 +0800</pubDate><guid>https://bobblelaw.github.io/posts/how-to-use-cmake-to-configure-a-qt-project/</guid><description>&lt;h3 id="a-simple-qt-code">A Simple Qt code&lt;/h3>
&lt;p>Here is a hello world code for Qt&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;QtCore/QCoreApplication&amp;gt;
#include &amp;lt;QtCore/QDebug&amp;gt;
int main(int argc, char** argv){
 QCoreApplication app(argc, argv);
 qDebug() &amp;lt;&amp;lt; &amp;#34;Hello, Qt!&amp;#34;;
 app.exec()
}
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>If we don&amp;rsquo;t use IDE or qmake, but compiler, this is the command&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>g++ main.cpp -I\\path\to\Qt\5.13.0\include -o main -L\path\to\Qt\5.13.0\lib -lQtCore4
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>If we have qmake, all we need is&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>CONFIG +=qt
QT -= gui
SOURCE += main.cpp
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>If we use cmake, our old friend CMakeList.txt comes to stage&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>PROJECT(example)
FIND_PACKAGE(Qt4 COMPONENTS QtCore REQUIRED)
INCLUDE(${QT_USE_FILE})
ADD_EXECUTABLE(example main.cpp)
&lt;/code>&lt;/pre>&lt;h3 id="a-complete-qt-project">A Complete Qt Project&lt;/h3>
&lt;p>Ususally a complete qt project would consist of the following files&lt;/p></description></item></channel></rss>