<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Registration on Bobble Law</title><link>https://bobblelaw.github.io/tags/registration/</link><description>Recent content in Registration on Bobble Law</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sun, 18 Apr 2021 15:17:26 +0800</lastBuildDate><atom:link href="https://bobblelaw.github.io/tags/registration/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Perspective-N-Points</title><link>https://bobblelaw.github.io/posts/understanding-pnp/</link><pubDate>Sun, 18 Apr 2021 15:17:26 +0800</pubDate><guid>https://bobblelaw.github.io/posts/understanding-pnp/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Perspective-n-Point (PnP) problem is the problem of estimating the relative pose between an object and the camera, given a set of correspondences between 3D points and their projections on the image plane.&lt;br>
It is a fundamental problem that was first studied in the photogrammetry literature, and later on studied in the context of computer vision.&lt;/p>
&lt;p>In this post, I will present a few solvers (among many), discuss their proofs and also show some concise implementations. I will focus on the minimal solvers - solutions to the PnP problem that requires the minimal amount of information. In this case, we need at least three pairs of correspondences, and the minimal solvers that only require three pairs of correspondences are called P3P solvers.&lt;/p></description></item></channel></rss>